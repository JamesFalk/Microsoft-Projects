Public NotInheritable Class MainPage
#Region "Variables, Formload, TxtDisp"
Inherits Page
Dim ioH, ioW, iQR, tAlNumi, LetX, LetY, elPos, SeqLoop, CCyc, CCCL(31, 2, 9), CCCi, CCCm, CCflag, LC, PreCst, MvCp As Integer
Dim PLS, XYZ, ijk(2), LEDstate(1, 5, 5, 5, 1000), TLS(1, 5, 5, 5), EA(7), LEDColor, LColor, LEDNumber, TS, TSn, LoadFlag, WC, wlc, OwIn, OPTRRC(30, 25, 6), Emm(6),
LSimMax(20), LSeq, LSeqf, LScrni, LScrnf(25), AF(2), AnFrames, AnTime, ScFrames(1000), ScTime(1000), Afx, AN(2), mapAN(3), LetEncode(70, 5, 5), Lcode(25, 70),
RLCode(25), aQRP(25, 8), QRf, IFD(3), ITFD(6, 126, 126, 126) As Double
Dim Plane, EncCol, EncFr, EncAn, AlNu(10, 7), LEC(70), EllStr, LS As String
Dim EllArr(6), tbArr(6), rectArrI(125), rectArrJ(25), rectArrO(125) As Object : Dim elLoc, rectLocI(125), rectLocJ(25), rectLocO(125) As Thickness : Dim rn As New Random
Private Sub LoadForm() Handles Me.Loaded
XYZ = 1 : Plane = "X" : TS = 1 : PLS = 5 : LEDColor = 0 : LoadFlag = 0 : AF(0) = 1 : AF(1) = 1 : iQR = 1 : QRf = 0 : tAlNumi = 1
AnTime = 1 : ScFrames(1) = 1 : TCompDisp() : OwIn = 1 : PreCst = 1 : MvCp = 0
cbxXloop.IsChecked = 1 : cbxYloop.IsChecked = 1 : cbxZloop.IsChecked = 1 : cboOperation.SelectedIndex = 0
For t = 0 To 1000 : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : LEDstate(0, i, j, k, t) = 0 : Next : Next : Next : Next
LScrni = 1 : LSeq = 1 : LSeqf = 1 : For i = 1 To 24 : LScrnf(i) = 1 : Next
AlNu = {{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"},
{"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T"},
{"U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3"},
{"4", "5", "6", "7", "8", "9", "a", "b", "c", "d"},
{"e", "f", "g", "h", "i", "j", "k", "l", "m", "n"},
{"o", "p", "q", "r", "s", "t", "u", "v", "w", "x"},
{"y", "z", "!", "#", "$", "%", "^", ".", ":", "?"}}
Lcode =
{{0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1}, {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0},
{1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0},
{1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
{1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1}, {1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1},
{1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1}, {0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0},
{1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1},
{1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1}, {1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1},
{0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0}, {1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
{1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0},
{1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1},
{1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0}, {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1},
{1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1}, {0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0},
{1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}, {1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0},
{0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
{0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1}, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0},
{0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0}, {0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
{0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0}, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0},
{0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0}, {0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0},
{1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0},
{0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1}, {0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1},
{0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
{0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1}, {0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
{0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0}, {0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
{0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0}, {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0},
{0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1}, {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1},
{0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0}, {0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0},
{1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1}, {1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1},
{0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0},
{0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0}, {0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
aQRP =
{{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}, {5, 10, 15, 20, 25, 4, 9, 14, 19, 24, 3, 8, 13, 18, 23, 2, 7, 12, 17, 22, 1, 6, 11, 16, 21},
{25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}, {21, 16, 11, 6, 1, 22, 17, 12, 7, 2, 23, 18, 13, 8, 3, 24, 19, 14, 9, 4, 25, 20, 15, 10, 5},
{5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 20, 19, 18, 17, 16, 25, 24, 23, 22, 21}, {25, 20, 15, 10, 5, 24, 19, 14, 9, 4, 23, 18, 13, 8, 3, 22, 17, 12, 7, 2, 21, 16, 11, 6, 1},
{21, 22, 23, 24, 25, 16, 17, 18, 19, 20, 11, 12, 13, 14, 15, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5}, {1, 6, 11, 16, 21, 2, 7, 12, 17, 22, 3, 8, 13, 18, 23, 4, 9, 14, 19, 24, 5, 10, 15, 20, 25}}
Afx = 0 : AN = {0, 0} : mapAN = {1, 1, 1}
For x = 1 To 5 : For y = 1 To 5 : For z = 1 To 5 : MapLEDstate(x, y, z) : Next : Next : Next
PDisp(1, 5) : scaleColors(1) : LoadFlag = 2 : GridClearer()
For a = 0 To 20 : For b = 0 To 20 : For c = 0 To 6 : OPTRRC(a, b, c) = 1 : Next : Next : Next
EllArr = {ellOri, ellPlane, ellThick, ellRot, ellReflect, ellColor} : Emm = {3, 6, 5, 4, 2, 9} : tbArr = {tbOri, tbPln, tbThi, tbRot, tbRef, tbCol}
rectArrI = {
rctI001, rctI002, rctI003, rctI004, rctI005, rctI006, rctI007, rctI008, rctI009, rctI010,
rctI011, rctI012, rctI013, rctI014, rctI015, rctI016, rctI017, rctI018, rctI019, rctI020,
rctI021, rctI022, rctI023, rctI024, rctI025, rctI026, rctI027, rctI028, rctI029, rctI030,
rctI031, rctI032, rctI033, rctI034, rctI035, rctI036, rctI037, rctI038, rctI039, rctI040,
rctI041, rctI042, rctI043, rctI044, rctI045, rctI046, rctI047, rctI048, rctI049, rctI050,
rctI051, rctI052, rctI053, rctI054, rctI055, rctI056, rctI057, rctI058, rctI059, rctI060,
rctI061, rctI062, rctI063, rctI064, rctI065, rctI066, rctI067, rctI068, rctI069, rctI070,
rctI071, rctI072, rctI073, rctI074, rctI075, rctI076, rctI077, rctI078, rctI079, rctI080,
rctI081, rctI082, rctI083, rctI084, rctI085, rctI086, rctI087, rctI088, rctI089, rctI090,
rctI091, rctI092, rctI093, rctI094, rctI095, rctI096, rctI097, rctI098, rctI099, rctI100,
rctI101, rctI102, rctI103, rctI104, rctI105, rctI106, rctI107, rctI108, rctI109, rctI110,
rctI111, rctI112, rctI113, rctI114, rctI115, rctI116, rctI117, rctI118, rctI119, rctI120,
rctI121, rctI122, rctI123, rctI124, rctI125}
rectArrJ = {
rctJ01, rctJ02, rctJ03, rctJ04, rctJ05, rctJ06, rctJ07, rctJ08, rctJ09, rctJ10,
rctJ11, rctJ12, rctJ13, rctJ14, rctJ15, rctJ16, rctJ17, rctJ18, rctJ19, rctJ20,
rctJ21, rctJ22, rctJ23, rctJ24, rctJ25}
rectArrO = {
rctO001, rctO002, rctO003, rctO004, rctO005, rctO006, rctO007, rctO008, rctO009, rctO010,
rctO011, rctO012, rctO013, rctO014, rctO015, rctO016, rctO017, rctO018, rctO019, rctO020,
rctO021, rctO022, rctO023, rctO024, rctO025, rctO026, rctO027, rctO028, rctO029, rctO030,
rctO031, rctO032, rctO033, rctO034, rctO035, rctO036, rctO037, rctO038, rctO039, rctO040,
rctO041, rctO042, rctO043, rctO044, rctO045, rctO046, rctO047, rctO048, rctO049, rctO050,
rctO051, rctO052, rctO053, rctO054, rctO055, rctO056, rctO057, rctO058, rctO059, rctO060,
rctO061, rctO062, rctO063, rctO064, rctO065, rctO066, rctO067, rctO068, rctO069, rctO070,
rctO071, rctO072, rctO073, rctO074, rctO075, rctO076, rctO077, rctO078, rctO079, rctO080,
rctO081, rctO082, rctO083, rctO084, rctO085, rctO086, rctO087, rctO088, rctO089, rctO090,
rctO091, rctO092, rctO093, rctO094, rctO095, rctO096, rctO097, rctO098, rctO099, rctO100,
rctO101, rctO102, rctO103, rctO104, rctO105, rctO106, rctO107, rctO108, rctO109, rctO110,
rctO111, rctO112, rctO113, rctO114, rctO115, rctO116, rctO117, rctO118, rctO119, rctO120,
rctO121, rctO122, rctO123, rctO124, rctO125}
CCflag = 0 : CCCi = 1 : CCCm = 1 : For k = 0 To 30 : For i = 1 To 2 : For j = 1 To 9 : CCycA1(i, j) : CCCL(k, i, j) = j - 1 : Next : Next : Next
CCycA1(1, 8) : CCycA1(2, 8) : For L = 0 To 2 : IFD(L) = 1 : Next : ITFD(0, 0, 0, 0) = 1 : ITFD(0, 1, 0, 0) = 1 : ITFD(0, 1, 1, 0) = 1
End Sub
Private Sub TCompDisp()
txtPLS.Text = Plane & 6 - PLS
AnFrames = 0 : For i = AF(0) To AF(1) : If ScFrames(i) = 0 Then : ScFrames(i) = 1 : End If
AnFrames = AnFrames + ScFrames(i) : Next
If TS > AF(1) Or TS <AF(0) Then : ScFrames(TS) = 0 : End If
ScTime(TS) = Math.Round(ScFrames(TS) * AnTime / AnFrames, 3)
txtAniDur.Text = "AnimDur:{" & AF(0) & ".." & AF(1) & "|" & AnFrames & "fr," & AnTime & "sec}"
txtSceneDur.Text = "SceneDur:{sc" & TS & "," & ScFrames(TS) & "fr," & ScTime(TS) & "sec}"
scaleColors(LColor)
End Sub
#End Region
#Region "Plane Orienting/Shifting/Displaying"
Private Sub btnXY_Click(sender As Object, e As RoutedEventArgs) Handles btnXY.Click
PDisp(3, PLS)
End Sub
Private Sub btnXZ_Click(sender As Object, e As RoutedEventArgs) Handles btnXZ.Click
PDisp(2, PLS)
End Sub
Private Sub btnYZ_Click(sender As Object, e As RoutedEventArgs) Handles btnYZ.Click
PDisp(1, PLS)
End Sub
Private Sub btnPlaneUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPlaneUp.Click
If PLS < 6 Then : PLS = PLS + 1 : PDisp(XYZ, PLS) : End If
End Sub
Private Sub btnPlanedn_Click(sender As Object, e As RoutedEventArgs) Handles btnPlaneDn.Click
If PLS > 0 Then : PLS = PLS - 1 : PDisp(XYZ, PLS) : End If
End Sub
Private Sub PDisp(ByVal PlnAxis As Integer, ByVal PlLvl As Integer)
CubeSetter() : Select Case PlnAxis
Case 1 : Plane = "X"
Select Case PlLvl
Case 1 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(500 + 10 * j + 1 * i, 1) : Next : Next
Case 2 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(400 + 10 * j + 1 * i, 1) : Next : Next
Case 3 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(300 + 10 * j + 1 * i, 1) : Next : Next
Case 4 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(200 + 10 * j + 1 * i, 1) : Next : Next
Case 5 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 + 10 * j + 1 * i, 1) : Next : Next
End Select
Case 2 : Plane = "Y"
Select Case PlLvl
Case 1 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * j + 50 + 1 * i, 1) : Next : Next
Case 2 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * j + 40 + 1 * i, 1) : Next : Next
Case 3 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * j + 30 + 1 * i, 1) : Next : Next
Case 4 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * j + 20 + 1 * i, 1) : Next : Next
Case 5 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * j + 10 + 1 * i, 1) : Next : Next
End Select
Case 3 : Plane = "Z"
Select Case PlLvl
Case 1 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * i + 10 * j + 1, 1) : Next : Next
Case 2 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * i + 10 * j + 2, 1) : Next : Next
Case 3 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * i + 10 * j + 3, 1) : Next : Next
Case 4 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * i + 10 * j + 4, 1) : Next : Next
Case 5 : For i = 1 To 5 : For j = 1 To 5 : SetPlnLvl(100 * i + 10 * j + 5, 1) : Next : Next
End Select
End Select : XYZ = PlnAxis : TCompDisp()
End Sub
Private Sub CubeSetter()
For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : SetPlnLvl(k * 1 + j * 10 + i * 100, 0) : Next : Next : Next
End Sub
Private Sub SetPlnLvl(ByVal L As Integer, ByVal io As Integer)
Select Case io
Case 0 : LedMorph(L, "UpSize")
Case 1 : LedMorph(L, "DownSize")
End Select
End Sub
#End Region
#Region "Color Selector/Mapper Buttons"
Private Sub btnOff_Click(sender As Object, e As RoutedEventArgs) Handles btnOff.Click
scaleColors(0)
End Sub
Private Sub btnRed_Click(sender As Object, e As RoutedEventArgs) Handles btnRed.Click
scaleColors(1)
End Sub
Private Sub btnGreen_Click(sender As Object, e As RoutedEventArgs) Handles btnGreen.Click
scaleColors(2)
End Sub
Private Sub btnBlue_Click(sender As Object, e As RoutedEventArgs) Handles btnBlue.Click
scaleColors(3)
End Sub
Private Sub btnTrquiose_Click(sender As Object, e As RoutedEventArgs) Handles btnTurquiose.Click
scaleColors(4)
End Sub
Private Sub btnPurple_Click(sender As Object, e As RoutedEventArgs) Handles btnPurple.Click
scaleColors(5)
End Sub
Private Sub btnYellow_Click(sender As Object, e As RoutedEventArgs) Handles btnYellow.Click
scaleColors(6)
End Sub
Private Sub btnWhite_Click(sender As Object, e As RoutedEventArgs) Handles btnWhite.Click
scaleColors(7)
End Sub
Private Sub scaleColors(ByVal sc As Integer)
LEDColor = sc
LColor = sc
btnOff.Height = 32 : btnOff.Width = 32 : btnRed.Height = 32 : btnRed.Width = 32 : btnGreen.Height = 32 : btnGreen.Width = 32
btnBlue.Height = 32 : btnBlue.Width = 32 : btnPurple.Height = 32 : btnPurple.Width = 32 : btnTurquiose.Height = 32 : btnTurquiose.Width = 32
btnYellow.Height = 32 : btnYellow.Width = 32 : btnWhite.Height = 32 : btnWhite.Width = 32
Select Case sc
Case 0 : btnOff.Height = 40 : btnOff.Width = 40
Case 1 : btnRed.Height = 40 : btnRed.Width = 40
Case 2 : btnGreen.Height = 40 : btnGreen.Width = 40
Case 3 : btnBlue.Height = 40 : btnBlue.Width = 40
Case 4 : btnTurquiose.Height = 40 : btnTurquiose.Width = 40
Case 5 : btnPurple.Height = 40 : btnPurple.Width = 40
Case 6 : btnYellow.Height = 40 : btnYellow.Width = 40
Case 7 : btnWhite.Height = 40 : btnWhite.Width = 40
End Select
End Sub
Private Sub btn11_Click(sender As Object, e As RoutedEventArgs) Handles btn11.Click
MapLEDstate(1, PLS, 1)
End Sub
Private Sub btn12_Click(sender As Object, e As RoutedEventArgs) Handles btn12.Click
MapLEDstate(2, PLS, 1)
End Sub
Private Sub btn13_Click(sender As Object, e As RoutedEventArgs) Handles btn13.Click
MapLEDstate(3, PLS, 1)
End Sub
Private Sub btn14_Click(sender As Object, e As RoutedEventArgs) Handles btn14.Click
MapLEDstate(4, PLS, 1)
End Sub
Private Sub btn15_Click(sender As Object, e As RoutedEventArgs) Handles btn15.Click
MapLEDstate(5, PLS, 1)
End Sub
Private Sub btn21_Click(sender As Object, e As RoutedEventArgs) Handles btn21.Click
MapLEDstate(1, PLS, 2)
End Sub
Private Sub btn22_Click(sender As Object, e As RoutedEventArgs) Handles btn22.Click
MapLEDstate(2, PLS, 2)
End Sub
Private Sub btn23_Click(sender As Object, e As RoutedEventArgs) Handles btn23.Click
MapLEDstate(3, PLS, 2)
End Sub
Private Sub btn24_Click(sender As Object, e As RoutedEventArgs) Handles btn24.Click
MapLEDstate(4, PLS, 2)
End Sub
Private Sub btn25_Click(sender As Object, e As RoutedEventArgs) Handles btn25.Click
MapLEDstate(5, PLS, 2)
End Sub
Private Sub btn31_Click(sender As Object, e As RoutedEventArgs) Handles btn31.Click
MapLEDstate(1, PLS, 3)
End Sub
Private Sub btn32_Click(sender As Object, e As RoutedEventArgs) Handles btn32.Click
MapLEDstate(2, PLS, 3)
End Sub
Private Sub btn33_Click(sender As Object, e As RoutedEventArgs) Handles btn33.Click
MapLEDstate(3, PLS, 3)
End Sub
Private Sub btn34_Click(sender As Object, e As RoutedEventArgs) Handles btn34.Click
MapLEDstate(4, PLS, 3)
End Sub
Private Sub btn35_Click(sender As Object, e As RoutedEventArgs) Handles btn35.Click
MapLEDstate(5, PLS, 3)
End Sub
Private Sub btn41_Click(sender As Object, e As RoutedEventArgs) Handles btn41.Click
MapLEDstate(1, PLS, 4)
End Sub
Private Sub btn42_Click(sender As Object, e As RoutedEventArgs) Handles btn42.Click
MapLEDstate(2, PLS, 4)
End Sub
Private Sub btn43_Click(sender As Object, e As RoutedEventArgs) Handles btn43.Click
MapLEDstate(3, PLS, 4)
End Sub
Private Sub btn44_Click(sender As Object, e As RoutedEventArgs) Handles btn44.Click
MapLEDstate(4, PLS, 4)
End Sub
Private Sub btn45_Click(sender As Object, e As RoutedEventArgs) Handles btn45.Click
MapLEDstate(5, PLS, 4)
End Sub
Private Sub btn51_Click(sender As Object, e As RoutedEventArgs) Handles btn51.Click
MapLEDstate(1, PLS, 5)
End Sub
Private Sub btn52_Click(sender As Object, e As RoutedEventArgs) Handles btn52.Click
MapLEDstate(2, PLS, 5)
End Sub
Private Sub btn53_Click(sender As Object, e As RoutedEventArgs) Handles btn53.Click
MapLEDstate(3, PLS, 5)
End Sub
Private Sub btn54_Click(sender As Object, e As RoutedEventArgs) Handles btn54.Click
MapLEDstate(4, PLS, 5)
End Sub
Private Sub btn55_Click(sender As Object, e As RoutedEventArgs) Handles btn55.Click
MapLEDstate(5, PLS, 5)
End Sub
#End Region
#Region "Map/Display/Morph Functions"
Public Sub MapLEDstate(ByVal X, ByVal Y, ByVal Z)
Try : Select Case LoadFlag
Case = 0 : Select Case XYZ
Case = 1 : ijk(0) = 6 - Y : ijk(1) = Z : ijk(2) = 6 - X 'YZ Plane
Case = 2 : ijk(0) = X : ijk(1) = Z : ijk(2) = Y 'XZ Plane
Case = 3 : ijk(0) = X : ijk(1) = Y : ijk(2) = Z 'XY Plane
End Select : LEDNumber = 100 * ijk(0) + 1 * ijk(1) + 10 * (6 - ijk(2))
LEDstate(0, ijk(0), ijk(1), ijk(2), TS) = LEDColor : LEDstate(1, ijk(0), ijk(1), ijk(2), TS) = LEDNumber
Case = 1 : LEDColor = LEDstate(0, X, Y, Z, TS) : LEDNumber = LEDstate(1, X, Y, Z, TS) : End Select
LEDdisplayer(LEDNumber, LEDColor) : LoadFlag = 0 : Catch : End Try
End Sub
Private Sub LEDdisplayer(ByVal EN As Integer, ByVal EC As Integer)
For i As Integer = 0 To 7 : EA(i) = 0 : Next : EA(EC) = 1 : LedMorph(EN, "Color Shift")
End Sub
Private Sub LedMorph(ByVal L As Integer, ByVal Morph As String)
Select Case L
Case 111 : ledmorphB(crc111_oo, crc111_Rd, crc111_Gr, crc111_Bl, crc111_Yw, crc111_Pu, crc111_Tq, crc111_Wh, Morph)
Case 112 : ledmorphB(crc112_oo, crc112_Rd, crc112_Gr, crc112_Bl, crc112_Yw, crc112_Pu, crc112_Tq, crc112_Wh, Morph)
Case 113 : ledmorphB(crc113_oo, crc113_Rd, crc113_Gr, crc113_Bl, crc113_Yw, crc113_Pu, crc113_Tq, crc113_Wh, Morph)
Case 114 : ledmorphB(crc114_oo, crc114_Rd, crc114_Gr, crc114_Bl, crc114_Yw, crc114_Pu, crc114_Tq, crc114_Wh, Morph)
Case 115 : ledmorphB(crc115_oo, crc115_Rd, crc115_Gr, crc115_Bl, crc115_Yw, crc115_Pu, crc115_Tq, crc115_Wh, Morph)
Case 121 : ledmorphB(crc121_oo, crc121_Rd, crc121_Gr, crc121_Bl, crc121_Yw, crc121_Pu, crc121_Tq, crc121_Wh, Morph)
Case 122 : ledmorphB(crc122_oo, crc122_Rd, crc122_Gr, crc122_Bl, crc122_Yw, crc122_Pu, crc122_Tq, crc122_Wh, Morph)
Case 123 : ledmorphB(crc123_oo, crc123_Rd, crc123_Gr, crc123_Bl, crc123_Yw, crc123_Pu, crc123_Tq, crc123_Wh, Morph)
Case 124 : ledmorphB(crc124_oo, crc124_Rd, crc124_Gr, crc124_Bl, crc124_Yw, crc124_Pu, crc124_Tq, crc124_Wh, Morph)
Case 125 : ledmorphB(crc125_oo, crc125_Rd, crc125_Gr, crc125_Bl, crc125_Yw, crc125_Pu, crc125_Tq, crc125_Wh, Morph)
Case 131 : ledmorphB(crc131_oo, crc131_Rd, crc131_Gr, crc131_Bl, crc131_Yw, crc131_Pu, crc131_Tq, crc131_Wh, Morph)
Case 132 : ledmorphB(crc132_oo, crc132_Rd, crc132_Gr, crc132_Bl, crc132_Yw, crc132_Pu, crc132_Tq, crc132_Wh, Morph)
Case 133 : ledmorphB(crc133_oo, crc133_Rd, crc133_Gr, crc133_Bl, crc133_Yw, crc133_Pu, crc133_Tq, crc133_Wh, Morph)
Case 134 : ledmorphB(crc134_oo, crc134_Rd, crc134_Gr, crc134_Bl, crc134_Yw, crc134_Pu, crc134_Tq, crc134_Wh, Morph)
Case 135 : ledmorphB(crc135_oo, crc135_Rd, crc135_Gr, crc135_Bl, crc135_Yw, crc135_Pu, crc135_Tq, crc135_Wh, Morph)
Case 141 : ledmorphB(crc141_oo, crc141_Rd, crc141_Gr, crc141_Bl, crc141_Yw, crc141_Pu, crc141_Tq, crc141_Wh, Morph)
Case 142 : ledmorphB(crc142_oo, crc142_Rd, crc142_Gr, crc142_Bl, crc142_Yw, crc142_Pu, crc142_Tq, crc142_Wh, Morph)
Case 143 : ledmorphB(crc143_oo, crc143_Rd, crc143_Gr, crc143_Bl, crc143_Yw, crc143_Pu, crc143_Tq, crc143_Wh, Morph)
Case 144 : ledmorphB(crc144_oo, crc144_Rd, crc144_Gr, crc144_Bl, crc144_Yw, crc144_Pu, crc144_Tq, crc144_Wh, Morph)
Case 145 : ledmorphB(crc145_oo, crc145_Rd, crc145_Gr, crc145_Bl, crc145_Yw, crc145_Pu, crc145_Tq, crc145_Wh, Morph)
Case 151 : ledmorphB(crc151_oo, crc151_Rd, crc151_Gr, crc151_Bl, crc151_Yw, crc151_Pu, crc151_Tq, crc151_Wh, Morph)
Case 152 : ledmorphB(crc152_oo, crc152_Rd, crc152_Gr, crc152_Bl, crc152_Yw, crc152_Pu, crc152_Tq, crc152_Wh, Morph)
Case 153 : ledmorphB(crc153_oo, crc153_Rd, crc153_Gr, crc153_Bl, crc153_Yw, crc153_Pu, crc153_Tq, crc153_Wh, Morph)
Case 154 : ledmorphB(crc154_oo, crc154_Rd, crc154_Gr, crc154_Bl, crc154_Yw, crc154_Pu, crc154_Tq, crc154_Wh, Morph)
Case 155 : ledmorphB(crc155_oo, crc155_Rd, crc155_Gr, crc155_Bl, crc155_Yw, crc155_Pu, crc155_Tq, crc155_Wh, Morph)
Case 211 : ledmorphB(crc211_oo, crc211_Rd, crc211_Gr, crc211_Bl, crc211_Yw, crc211_Pu, crc211_Tq, crc211_Wh, Morph)
Case 212 : ledmorphB(crc212_oo, crc212_Rd, crc212_Gr, crc212_Bl, crc212_Yw, crc212_Pu, crc212_Tq, crc212_Wh, Morph)
Case 213 : ledmorphB(crc213_oo, crc213_Rd, crc213_Gr, crc213_Bl, crc213_Yw, crc213_Pu, crc213_Tq, crc213_Wh, Morph)
Case 214 : ledmorphB(crc214_oo, crc214_Rd, crc214_Gr, crc214_Bl, crc214_Yw, crc214_Pu, crc214_Tq, crc214_Wh, Morph)
Case 215 : ledmorphB(crc215_oo, crc215_Rd, crc215_Gr, crc215_Bl, crc215_Yw, crc215_Pu, crc215_Tq, crc215_Wh, Morph)
Case 221 : ledmorphB(crc221_oo, crc221_Rd, crc221_Gr, crc221_Bl, crc221_Yw, crc221_Pu, crc221_Tq, crc221_Wh, Morph)
Case 222 : ledmorphB(crc222_oo, crc222_Rd, crc222_Gr, crc222_Bl, crc222_Yw, crc222_Pu, crc222_Tq, crc222_Wh, Morph)
Case 223 : ledmorphB(crc223_oo, crc223_Rd, crc223_Gr, crc223_Bl, crc223_Yw, crc223_Pu, crc223_Tq, crc223_Wh, Morph)
Case 224 : ledmorphB(crc224_oo, crc224_Rd, crc224_Gr, crc224_Bl, crc224_Yw, crc224_Pu, crc224_Tq, crc224_Wh, Morph)
Case 225 : ledmorphB(crc225_oo, crc225_Rd, crc225_Gr, crc225_Bl, crc225_Yw, crc225_Pu, crc225_Tq, crc225_Wh, Morph)
Case 231 : ledmorphB(crc231_oo, crc231_Rd, crc231_Gr, crc231_Bl, crc231_Yw, crc231_Pu, crc231_Tq, crc231_Wh, Morph)
Case 232 : ledmorphB(crc232_oo, crc232_Rd, crc232_Gr, crc232_Bl, crc232_Yw, crc232_Pu, crc232_Tq, crc232_Wh, Morph)
Case 233 : ledmorphB(crc233_oo, crc233_Rd, crc233_Gr, crc233_Bl, crc233_Yw, crc233_Pu, crc233_Tq, crc233_Wh, Morph)
Case 234 : ledmorphB(crc234_oo, crc234_Rd, crc234_Gr, crc234_Bl, crc234_Yw, crc234_Pu, crc234_Tq, crc234_Wh, Morph)
Case 235 : ledmorphB(crc235_oo, crc235_Rd, crc235_Gr, crc235_Bl, crc235_Yw, crc235_Pu, crc235_Tq, crc235_Wh, Morph)
Case 241 : ledmorphB(crc241_oo, crc241_Rd, crc241_Gr, crc241_Bl, crc241_Yw, crc241_Pu, crc241_Tq, crc241_Wh, Morph)
Case 242 : ledmorphB(crc242_oo, crc242_Rd, crc242_Gr, crc242_Bl, crc242_Yw, crc242_Pu, crc242_Tq, crc242_Wh, Morph)
Case 243 : ledmorphB(crc243_oo, crc243_Rd, crc243_Gr, crc243_Bl, crc243_Yw, crc243_Pu, crc243_Tq, crc243_Wh, Morph)
Case 244 : ledmorphB(crc244_oo, crc244_Rd, crc244_Gr, crc244_Bl, crc244_Yw, crc244_Pu, crc244_Tq, crc244_Wh, Morph)
Case 245 : ledmorphB(crc245_oo, crc245_Rd, crc245_Gr, crc245_Bl, crc245_Yw, crc245_Pu, crc245_Tq, crc245_Wh, Morph)
Case 251 : ledmorphB(crc251_oo, crc251_Rd, crc251_Gr, crc251_Bl, crc251_Yw, crc251_Pu, crc251_Tq, crc251_Wh, Morph)
Case 252 : ledmorphB(crc252_oo, crc252_Rd, crc252_Gr, crc252_Bl, crc252_Yw, crc252_Pu, crc252_Tq, crc252_Wh, Morph)
Case 253 : ledmorphB(crc253_oo, crc253_Rd, crc253_Gr, crc253_Bl, crc253_Yw, crc253_Pu, crc253_Tq, crc253_Wh, Morph)
Case 254 : ledmorphB(crc254_oo, crc254_Rd, crc254_Gr, crc254_Bl, crc254_Yw, crc254_Pu, crc254_Tq, crc254_Wh, Morph)
Case 255 : ledmorphB(crc255_oo, crc255_Rd, crc255_Gr, crc255_Bl, crc255_Yw, crc255_Pu, crc255_Tq, crc255_Wh, Morph)
Case 311 : ledmorphB(crc311_oo, crc311_Rd, crc311_Gr, crc311_Bl, crc311_Yw, crc311_Pu, crc311_Tq, crc311_Wh, Morph)
Case 312 : ledmorphB(crc312_oo, crc312_Rd, crc312_Gr, crc312_Bl, crc312_Yw, crc312_Pu, crc312_Tq, crc312_Wh, Morph)
Case 313 : ledmorphB(crc313_oo, crc313_Rd, crc313_Gr, crc313_Bl, crc313_Yw, crc313_Pu, crc313_Tq, crc313_Wh, Morph)
Case 314 : ledmorphB(crc314_oo, crc314_Rd, crc314_Gr, crc314_Bl, crc314_Yw, crc314_Pu, crc314_Tq, crc314_Wh, Morph)
Case 315 : ledmorphB(crc315_oo, crc315_Rd, crc315_Gr, crc315_Bl, crc315_Yw, crc315_Pu, crc315_Tq, crc315_Wh, Morph)
Case 321 : ledmorphB(crc321_oo, crc321_Rd, crc321_Gr, crc321_Bl, crc321_Yw, crc321_Pu, crc321_Tq, crc321_Wh, Morph)
Case 322 : ledmorphB(crc322_oo, crc322_Rd, crc322_Gr, crc322_Bl, crc322_Yw, crc322_Pu, crc322_Tq, crc322_Wh, Morph)
Case 323 : ledmorphB(crc323_oo, crc323_Rd, crc323_Gr, crc323_Bl, crc323_Yw, crc323_Pu, crc323_Tq, crc323_Wh, Morph)
Case 324 : ledmorphB(crc324_oo, crc324_Rd, crc324_Gr, crc324_Bl, crc324_Yw, crc324_Pu, crc324_Tq, crc324_Wh, Morph)
Case 325 : ledmorphB(crc325_oo, crc325_Rd, crc325_Gr, crc325_Bl, crc325_Yw, crc325_Pu, crc325_Tq, crc325_Wh, Morph)
Case 331 : ledmorphB(crc331_oo, crc331_Rd, crc331_Gr, crc331_Bl, crc331_Yw, crc331_Pu, crc331_Tq, crc331_Wh, Morph)
Case 332 : ledmorphB(crc332_oo, crc332_Rd, crc332_Gr, crc332_Bl, crc332_Yw, crc332_Pu, crc332_Tq, crc332_Wh, Morph)
Case 333 : ledmorphB(crc333_oo, crc333_Rd, crc333_Gr, crc333_Bl, crc333_Yw, crc333_Pu, crc333_Tq, crc333_Wh, Morph)
Case 334 : ledmorphB(crc334_oo, crc334_Rd, crc334_Gr, crc334_Bl, crc334_Yw, crc334_Pu, crc334_Tq, crc334_Wh, Morph)
Case 335 : ledmorphB(crc335_oo, crc335_Rd, crc335_Gr, crc335_Bl, crc335_Yw, crc335_Pu, crc335_Tq, crc335_Wh, Morph)
Case 341 : ledmorphB(crc341_oo, crc341_Rd, crc341_Gr, crc341_Bl, crc341_Yw, crc341_Pu, crc341_Tq, crc341_Wh, Morph)
Case 342 : ledmorphB(crc342_oo, crc342_Rd, crc342_Gr, crc342_Bl, crc342_Yw, crc342_Pu, crc342_Tq, crc342_Wh, Morph)
Case 343 : ledmorphB(crc343_oo, crc343_Rd, crc343_Gr, crc343_Bl, crc343_Yw, crc343_Pu, crc343_Tq, crc343_Wh, Morph)
Case 344 : ledmorphB(crc344_oo, crc344_Rd, crc344_Gr, crc344_Bl, crc344_Yw, crc344_Pu, crc344_Tq, crc344_Wh, Morph)
Case 345 : ledmorphB(crc345_oo, crc345_Rd, crc345_Gr, crc345_Bl, crc345_Yw, crc345_Pu, crc345_Tq, crc345_Wh, Morph)
Case 351 : ledmorphB(crc351_oo, crc351_Rd, crc351_Gr, crc351_Bl, crc351_Yw, crc351_Pu, crc351_Tq, crc351_Wh, Morph)
Case 352 : ledmorphB(crc352_oo, crc352_Rd, crc352_Gr, crc352_Bl, crc352_Yw, crc352_Pu, crc352_Tq, crc352_Wh, Morph)
Case 353 : ledmorphB(crc353_oo, crc353_Rd, crc353_Gr, crc353_Bl, crc353_Yw, crc353_Pu, crc353_Tq, crc353_Wh, Morph)
Case 354 : ledmorphB(crc354_oo, crc354_Rd, crc354_Gr, crc354_Bl, crc354_Yw, crc354_Pu, crc354_Tq, crc354_Wh, Morph)
Case 355 : ledmorphB(crc355_oo, crc355_Rd, crc355_Gr, crc355_Bl, crc355_Yw, crc355_Pu, crc355_Tq, crc355_Wh, Morph)
Case 411 : ledmorphB(crc411_oo, crc411_Rd, crc411_Gr, crc411_Bl, crc411_Yw, crc411_Pu, crc411_Tq, crc411_Wh, Morph)
Case 412 : ledmorphB(crc412_oo, crc412_Rd, crc412_Gr, crc412_Bl, crc412_Yw, crc412_Pu, crc412_Tq, crc412_Wh, Morph)
Case 413 : ledmorphB(crc413_oo, crc413_Rd, crc413_Gr, crc413_Bl, crc413_Yw, crc413_Pu, crc413_Tq, crc413_Wh, Morph)
Case 414 : ledmorphB(crc414_oo, crc414_Rd, crc414_Gr, crc414_Bl, crc414_Yw, crc414_Pu, crc414_Tq, crc414_Wh, Morph)
Case 415 : ledmorphB(crc415_oo, crc415_Rd, crc415_Gr, crc415_Bl, crc415_Yw, crc415_Pu, crc415_Tq, crc415_Wh, Morph)
Case 421 : ledmorphB(crc421_oo, crc421_Rd, crc421_Gr, crc421_Bl, crc421_Yw, crc421_Pu, crc421_Tq, crc421_Wh, Morph)
Case 422 : ledmorphB(crc422_oo, crc422_Rd, crc422_Gr, crc422_Bl, crc422_Yw, crc422_Pu, crc422_Tq, crc422_Wh, Morph)
Case 423 : ledmorphB(crc423_oo, crc423_Rd, crc423_Gr, crc423_Bl, crc423_Yw, crc423_Pu, crc423_Tq, crc423_Wh, Morph)
Case 424 : ledmorphB(crc424_oo, crc424_Rd, crc424_Gr, crc424_Bl, crc424_Yw, crc424_Pu, crc424_Tq, crc424_Wh, Morph)
Case 425 : ledmorphB(crc425_oo, crc425_Rd, crc425_Gr, crc425_Bl, crc425_Yw, crc425_Pu, crc425_Tq, crc425_Wh, Morph)
Case 431 : ledmorphB(crc431_oo, crc431_Rd, crc431_Gr, crc431_Bl, crc431_Yw, crc431_Pu, crc431_Tq, crc431_Wh, Morph)
Case 432 : ledmorphB(crc432_oo, crc432_Rd, crc432_Gr, crc432_Bl, crc432_Yw, crc432_Pu, crc432_Tq, crc432_Wh, Morph)
Case 433 : ledmorphB(crc433_oo, crc433_Rd, crc433_Gr, crc433_Bl, crc433_Yw, crc433_Pu, crc433_Tq, crc433_Wh, Morph)
Case 434 : ledmorphB(crc434_oo, crc434_Rd, crc434_Gr, crc434_Bl, crc434_Yw, crc434_Pu, crc434_Tq, crc434_Wh, Morph)
Case 435 : ledmorphB(crc435_oo, crc435_Rd, crc435_Gr, crc435_Bl, crc435_Yw, crc435_Pu, crc435_Tq, crc435_Wh, Morph)
Case 441 : ledmorphB(crc441_oo, crc441_Rd, crc441_Gr, crc441_Bl, crc441_Yw, crc441_Pu, crc441_Tq, crc441_Wh, Morph)
Case 442 : ledmorphB(crc442_oo, crc442_Rd, crc442_Gr, crc442_Bl, crc442_Yw, crc442_Pu, crc442_Tq, crc442_Wh, Morph)
Case 443 : ledmorphB(crc443_oo, crc443_Rd, crc443_Gr, crc443_Bl, crc443_Yw, crc443_Pu, crc443_Tq, crc443_Wh, Morph)
Case 444 : ledmorphB(crc444_oo, crc444_Rd, crc444_Gr, crc444_Bl, crc444_Yw, crc444_Pu, crc444_Tq, crc444_Wh, Morph)
Case 445 : ledmorphB(crc445_oo, crc445_Rd, crc445_Gr, crc445_Bl, crc445_Yw, crc445_Pu, crc445_Tq, crc445_Wh, Morph)
Case 451 : ledmorphB(crc451_oo, crc451_Rd, crc451_Gr, crc451_Bl, crc451_Yw, crc451_Pu, crc451_Tq, crc451_Wh, Morph)
Case 452 : ledmorphB(crc452_oo, crc452_Rd, crc452_Gr, crc452_Bl, crc452_Yw, crc452_Pu, crc452_Tq, crc452_Wh, Morph)
Case 453 : ledmorphB(crc453_oo, crc453_Rd, crc453_Gr, crc453_Bl, crc453_Yw, crc453_Pu, crc453_Tq, crc453_Wh, Morph)
Case 454 : ledmorphB(crc454_oo, crc454_Rd, crc454_Gr, crc454_Bl, crc454_Yw, crc454_Pu, crc454_Tq, crc454_Wh, Morph)
Case 455 : ledmorphB(crc455_oo, crc455_Rd, crc455_Gr, crc455_Bl, crc455_Yw, crc455_Pu, crc455_Tq, crc455_Wh, Morph)
Case 511 : ledmorphB(crc511_oo, crc511_Rd, crc511_Gr, crc511_Bl, crc511_Yw, crc511_Pu, crc511_Tq, crc511_Wh, Morph)
Case 512 : ledmorphB(crc512_oo, crc512_Rd, crc512_Gr, crc512_Bl, crc512_Yw, crc512_Pu, crc512_Tq, crc512_Wh, Morph)
Case 513 : ledmorphB(crc513_oo, crc513_Rd, crc513_Gr, crc513_Bl, crc513_Yw, crc513_Pu, crc513_Tq, crc513_Wh, Morph)
Case 514 : ledmorphB(crc514_oo, crc514_Rd, crc514_Gr, crc514_Bl, crc514_Yw, crc514_Pu, crc514_Tq, crc514_Wh, Morph)
Case 515 : ledmorphB(crc515_oo, crc515_Rd, crc515_Gr, crc515_Bl, crc515_Yw, crc515_Pu, crc515_Tq, crc515_Wh, Morph)
Case 521 : ledmorphB(crc521_oo, crc521_Rd, crc521_Gr, crc521_Bl, crc521_Yw, crc521_Pu, crc521_Tq, crc521_Wh, Morph)
Case 522 : ledmorphB(crc522_oo, crc522_Rd, crc522_Gr, crc522_Bl, crc522_Yw, crc522_Pu, crc522_Tq, crc522_Wh, Morph)
Case 523 : ledmorphB(crc523_oo, crc523_Rd, crc523_Gr, crc523_Bl, crc523_Yw, crc523_Pu, crc523_Tq, crc523_Wh, Morph)
Case 524 : ledmorphB(crc524_oo, crc524_Rd, crc524_Gr, crc524_Bl, crc524_Yw, crc524_Pu, crc524_Tq, crc524_Wh, Morph)
Case 525 : ledmorphB(crc525_oo, crc525_Rd, crc525_Gr, crc525_Bl, crc525_Yw, crc525_Pu, crc525_Tq, crc525_Wh, Morph)
Case 531 : ledmorphB(crc531_oo, crc531_Rd, crc531_Gr, crc531_Bl, crc531_Yw, crc531_Pu, crc531_Tq, crc531_Wh, Morph)
Case 532 : ledmorphB(crc532_oo, crc532_Rd, crc532_Gr, crc532_Bl, crc532_Yw, crc532_Pu, crc532_Tq, crc532_Wh, Morph)
Case 533 : ledmorphB(crc533_oo, crc533_Rd, crc533_Gr, crc533_Bl, crc533_Yw, crc533_Pu, crc533_Tq, crc533_Wh, Morph)
Case 534 : ledmorphB(crc534_oo, crc534_Rd, crc534_Gr, crc534_Bl, crc534_Yw, crc534_Pu, crc534_Tq, crc534_Wh, Morph)
Case 535 : ledmorphB(crc535_oo, crc535_Rd, crc535_Gr, crc535_Bl, crc535_Yw, crc535_Pu, crc535_Tq, crc535_Wh, Morph)
Case 541 : ledmorphB(crc541_oo, crc541_Rd, crc541_Gr, crc541_Bl, crc541_Yw, crc541_Pu, crc541_Tq, crc541_Wh, Morph)
Case 542 : ledmorphB(crc542_oo, crc542_Rd, crc542_Gr, crc542_Bl, crc542_Yw, crc542_Pu, crc542_Tq, crc542_Wh, Morph)
Case 543 : ledmorphB(crc543_oo, crc543_Rd, crc543_Gr, crc543_Bl, crc543_Yw, crc543_Pu, crc543_Tq, crc543_Wh, Morph)
Case 544 : ledmorphB(crc544_oo, crc544_Rd, crc544_Gr, crc544_Bl, crc544_Yw, crc544_Pu, crc544_Tq, crc544_Wh, Morph)
Case 545 : ledmorphB(crc545_oo, crc545_Rd, crc545_Gr, crc545_Bl, crc545_Yw, crc545_Pu, crc545_Tq, crc545_Wh, Morph)
Case 551 : ledmorphB(crc551_oo, crc551_Rd, crc551_Gr, crc551_Bl, crc551_Yw, crc551_Pu, crc551_Tq, crc551_Wh, Morph)
Case 552 : ledmorphB(crc552_oo, crc552_Rd, crc552_Gr, crc552_Bl, crc552_Yw, crc552_Pu, crc552_Tq, crc552_Wh, Morph)
Case 553 : ledmorphB(crc553_oo, crc553_Rd, crc553_Gr, crc553_Bl, crc553_Yw, crc553_Pu, crc553_Tq, crc553_Wh, Morph)
Case 554 : ledmorphB(crc554_oo, crc554_Rd, crc554_Gr, crc554_Bl, crc554_Yw, crc554_Pu, crc554_Tq, crc554_Wh, Morph)
Case 555 : ledmorphB(crc555_oo, crc555_Rd, crc555_Gr, crc555_Bl, crc555_Yw, crc555_Pu, crc555_Tq, crc555_Wh, Morph)
End Select
End Sub
Private Sub ledmorphB(ByVal O_oo As Object, ByVal O_Rd As Object, ByVal O_Gr As Object, ByVal O_Bl As Object,
ByVal O_Yw As Object, ByVal O_Pu As Object, ByVal O_Tq As Object, ByVal O_Wh As Object, ByVal Morph As String)
Select Case Morph
Case = "Color Shift"
O_oo.Opacity = EA(0) : O_Rd.Opacity = EA(1) : O_Gr.Opacity = EA(2) : O_Bl.Opacity = EA(3)
O_Tq.Opacity = EA(4) : O_Pu.Opacity = EA(5) : O_Yw.Opacity = EA(6) : O_Wh.Opacity = EA(7)
Case = "DownSize"
O_oo.width = 20 : O_oo.Height = 20 : O_Rd.Width = 20 : O_Rd.Height = 20 : O_Gr.Width = 20 : O_Gr.Height = 20
O_Bl.Width = 20 : O_Bl.Height = 20 : O_Yw.width = 20 : O_Yw.Height = 20 : O_Pu.Width = 20 : O_Pu.Height = 20
O_Tq.Width = 20 : O_Tq.Height = 20 : O_Wh.Width = 20 : O_Wh.Height = 20
Case = "UpSize"
O_oo.width = 36 : O_oo.Height = 12 : O_Rd.Width = 36 : O_Rd.Height = 12 : O_Gr.Width = 36 : O_Gr.Height = 12
O_Bl.Width = 36 : O_Bl.Height = 12 : O_Yw.width = 36 : O_Yw.Height = 12 : O_Pu.Width = 36 : O_Pu.Height = 12
O_Tq.Width = 36 : O_Tq.Height = 12 : O_Wh.Width = 36 : O_Wh.Height = 12
End Select
End Sub
#End Region
#Region "Scene Setting, Clearing, Shifting, Adding, Deleting, and Loading"
Private Sub btnSb100_Click(sender As Object, e As RoutedEventArgs) Handles btnSb100.Click
If TS > 100 = True Then : TS = TS - 100 : Else : TS = 1 : End If : SceneLoader()
End Sub
Private Sub btnSb10_Click(sender As Object, e As RoutedEventArgs) Handles btnSb10.Click
If TS > 10 = True Then : TS = TS - 10 : Else : TS = 1 : End If : SceneLoader()
End Sub
Private Sub btnSb1_Click(sender As Object, e As RoutedEventArgs) Handles btnSb1.Click
If TS > 1 = True Then : TS = TS - 1 : SceneLoader() : End If
End Sub
Private Sub btnSC_Click(sender As Object, e As RoutedEventArgs) Handles btnSC.Click
LoadFlag = 2 : GridClearer()
End Sub
Private Sub btnSf1_Click(sender As Object, e As RoutedEventArgs) Handles btnSf1.Click
If TS < 1000 = True Then : TS = TS + 1 : SceneLoader() : End If
End Sub
Private Sub btnSf10_Click(sender As Object, e As RoutedEventArgs) Handles btnSf10.Click
If TS < 991 = True Then : TS = TS + 10 : Else : TS = 1000 : End If : SceneLoader()
End Sub
Private Sub btnSf100_Click(sender As Object, e As RoutedEventArgs) Handles btnSf100.Click
If TS < 901 = True Then : TS = TS + 100 : Else : TS = 1000 : End If : SceneLoader()
End Sub
Private Sub GridClearer()
For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : LEDdisplayer(100 * i + 10 * j + 1 * k, 0)
If LoadFlag = 2 Then : LEDstate(0, i, j, k, TS) = 0
LEDstate(1, i, j, k, TS) = 100 * i + 10 * j + 1 * k : End If
Next : Next : Next : LoadFlag = 0
End Sub
Private Sub btnAddB_Click(sender As Object, e As RoutedEventArgs) Handles btnAddB.Click
SceneShifter(1) : AF(1) = AF(1) + 1 : TCompDisp()
End Sub
Private Sub btnSDel_Click(sender As Object, e As RoutedEventArgs) Handles btnSDel.Click
SceneShifter(0) : AF(1) = AF(1) - 1 : TCompDisp()
End Sub
Private Sub btnAddF_Click(sender As Object, e As RoutedEventArgs) Handles btnAddF.Click
SceneShifter(2) : AF(1) = AF(1) + 1 : TCompDisp()
End Sub
Private Sub SceneShifter(ByVal Shift As Integer)
Select Case Shift
Case = 0 'Delete Scene
For t = TS To 1000 : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : For n = 0 To 1
If t < 1000 Then : LEDstate(n, i, j, k, t) = LEDstate(n, i, j, k, t + 1)
Else : LEDstate(n, i, j, k, t) = 0 : End If
Next : Next : Next : Next : Next : SceneLoader()
Case = 1 'Addcopy Scene Left
For t = 1000 To TS + 1 Step -1 : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : For n = 0 To 1
LEDstate(n, i, j, k, t) = LEDstate(n, i, j, k, t - 1)
Next : Next : Next : Next : Next : SceneLoader()
Case = 2 'Addcopy Scene Right
For t = 1000 To TS + 1 Step -1 : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : For n = 0 To 1
LEDstate(n, i, j, k, t) = LEDstate(n, i, j, k, t - 1)
Next : Next : Next : Next : Next : TS = TS + 1 : SceneLoader()
End Select
End Sub
Private Sub SceneLoader()
GridClearer() : For X = 1 To 5 : For Y = 1 To 5 : For Z = 1 To 5 : LoadFlag = 1
MapLEDstate(X, Y, Z) : Next : Next : Next : TCompDisp()
End Sub
#End Region
Private Sub btnEffects_Click(sender As Object, e As RoutedEventArgs) Handles btnEffects.Click
frIteraField.Visibility = Visibility.Collapsed : frColorCyc.Visibility = Visibility.Collapsed : frTextSequencer.Visibility = Visibility.Collapsed
Select Case Afx
Case = 0 : frColorCyc.Visibility = Visibility.Visible : Afx = 1
Case = 1 : frTextSequencer.Visibility = Visibility.Visible : Afx = 2
Case = 2 : frIteraField.Visibility = Visibility.Visible : Afx = 3
Case = 3 : Afx = 0
End Select : PDisp(1, 6) : PLS = 6
End Sub
#Region "Color Cycling"
Private Sub btnCCL_Click(sender As Object, e As RoutedEventArgs) Handles btnCCL.Click
If CCCi > 1 Then : CCCi = CCCi - 1 : CCDisp() : End If
End Sub
Private Sub btnCCM_Click(sender As Object, e As RoutedEventArgs) Handles btnCCM.Click
If CCCm > 1 Then
CCCm = CCCm - 1 : For k = CCCi To 30 : For j = 1 To 8 : For i = 1 To 2 : CCCL(k, i, j) = CCCL(k + 1, i, j) : Next : Next : Next
If CCCi > CCCm Then : CCCi = CCCm : End If : CCDisp() : End If
End Sub
Private Sub btnCCP_Click(sender As Object, e As RoutedEventArgs) Handles btnCCP.Click
If CCCm < 30 Then
For k = 31 To CCCi + 1 Step -1 : For j = 1 To 8 : For i = 1 To 2 : CCCL(k, i, j) = CCCL(k - 1, i, j) : Next : Next : Next
CCCm = CCCm + 1 : CCCi = CCCi + 1 : CCDisp() : End If
End Sub
Private Sub btnCCR_Click(sender As Object, e As RoutedEventArgs) Handles btnCCR.Click
If CCCi < CCCm Then : CCCi = CCCi + 1 : CCDisp() : End If
End Sub
Private Sub CCDisp()
txtColCycs.Text = CCCi & "/" & CCCm
For j = 1 To 9 : If CCCi > 1 Then : CCCL(CCCi, 1, j) = CCCL(CCCi - 1, 2, j) : Else : CCCL(CCCi, 1, j) = j + 1 : End If
CCCL(1, 1, 8) = 10 : CCyc = CCCL(CCCi, 1, j) - 1 : CCycA(1, j) : CCyc = CCCL(CCCi, 2, j) - 1 : CCycA(2, j) : Next
End Sub
Private Sub btnRedCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnRedCyc.Click
CCycA1(2, 1)
End Sub
Private Sub btnGrnCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnGrnCyc.Click
CCycA1(2, 2)
End Sub
Private Sub btnBluCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnBluCyc.Click
CCycA1(2, 3)
End Sub
Private Sub btnTrqCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnTrqCyc.Click
CCycA1(2, 4)
End Sub
Private Sub btnPrpCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnPrpCyc.Click
CCycA1(2, 5)
End Sub
Private Sub btnYllCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnYllCyc.Click
CCycA1(2, 6)
End Sub
Private Sub btnWhtCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnWhtCyc.Click
CCycA1(2, 7)
End Sub
Private Sub btnOffCyc_Click(sender As Object, e As RoutedEventArgs) Handles btnOffCyc.Click
CCycA1(2, 8)
End Sub
Private Sub CCycA1(ByVal CEio As Integer, ByVal C As Integer)
CCyc = CCCL(CCCi, CEio, C) : CCCL(CCCi, CEio, C) = CCCL(CCCi, CEio, C) + 1 : CCycA(CEio, C)
End Sub
Private Sub CCycA(ByVal CEio As Integer, ByVal C As Integer)
If CCCL(CCCi, CEio, C) = 10 Then : CCCL(CCCi, CEio, C) = 1 : End If : If CCyc = 0 Then : CCyc = 9 : End If
Select Case CEio : Case 1 : If CCflag = 1 Then : CCyc = C : If CCyc = 8 Then : CCyc = 9 : End If : End If : Select Case C
Case 1 : CCycB(ellRedRedN, ellRedGrnN, ellRedBluN, ellRedTrqN, ellRedPrpN, ellRedYllN, ellRedWhtN, ellRedOffN, ellRedRNDN, CCyc)
Case 2 : CCycB(ellGrnRedN, ellGrnGrnN, ellGrnBluN, ellGrnTrqN, ellGrnPrpN, ellGrnYllN, ellGrnWhtN, ellGrnOffN, ellGrnRNDN, CCyc)
Case 3 : CCycB(ellBluRedN, ellBluGrnN, ellBluBluN, ellBluTrqN, ellBluPrpN, ellBluYllN, ellBluWhtN, ellBluOffN, ellBluRNDN, CCyc)
Case 4 : CCycB(ellTrqRedN, ellTrqGrnN, ellTrqBluN, ellTrqTrqN, ellTrqPrpN, ellTrqYllN, ellTrqWhtN, ellTrqOffN, ellTrqRNDN, CCyc)
Case 5 : CCycB(ellPrpRedN, ellPrpGrnN, ellPrpBluN, ellPrpTrqN, ellPrpPrpN, ellPrpYllN, ellPrpWhtN, ellPrpOffN, ellPrpRNDN, CCyc)
Case 6 : CCycB(ellYllRedN, ellYllGrnN, ellYllBluN, ellYllTrqN, ellYllPrpN, ellYllYllN, ellYllWhtN, ellYllOffN, ellYllRNDN, CCyc)
Case 7 : CCycB(ellWhtRedN, ellWhtGrnN, ellWhtBluN, ellWhtTrqN, ellWhtPrpN, ellWhtYllN, ellWhtWhtN, ellWhtOffN, ellWhtRNDN, CCyc)
Case 8 : CCycB(ellOffRedN, ellOffGrnN, ellOffBluN, ellOffTrqN, ellOffPrpN, ellOffYllN, ellOffWhtN, ellOffOffN, ellOffRNDN, CCyc)
End Select : Case 2 : Select Case C
Case 1 : CCycB(ellRedRedO, ellRedGrnO, ellRedBluO, ellRedTrqO, ellRedPrpO, ellRedYllO, ellRedWhtO, ellRedOffO, ellRedRNDO, CCyc)
Case 2 : CCycB(ellGrnRedO, ellGrnGrnO, ellGrnBluO, ellGrnTrqO, ellGrnPrpO, ellGrnYllO, ellGrnWhtO, ellGrnOffO, ellGrnRNDO, CCyc)
Case 3 : CCycB(ellBluRedO, ellBluGrnO, ellBluBluO, ellBluTrqO, ellBluPrpO, ellBluYllO, ellBluWhtO, ellBluOffO, ellBluRNDO, CCyc)
Case 4 : CCycB(ellTrqRedO, ellTrqGrnO, ellTrqBluO, ellTrqTrqO, ellTrqPrpO, ellTrqYllO, ellTrqWhtO, ellTrqOffO, ellTrqRNDO, CCyc)
Case 5 : CCycB(ellPrpRedO, ellPrpGrnO, ellPrpBluO, ellPrpTrqO, ellPrpPrpO, ellPrpYllO, ellPrpWhtO, ellPrpOffO, ellPrpRNDO, CCyc)
Case 6 : CCycB(ellYllRedO, ellYllGrnO, ellYllBluO, ellYllTrqO, ellYllPrpO, ellYllYllO, ellYllWhtO, ellYllOffO, ellYllRNDO, CCyc)
Case 7 : CCycB(ellWhtRedO, ellWhtGrnO, ellWhtBluO, ellWhtTrqO, ellWhtPrpO, ellWhtYllO, ellWhtWhtO, ellWhtOffO, ellWhtRNDO, CCyc)
Case 8 : CCycB(ellOffRedO, ellOffGrnO, ellOffBluO, ellOffTrqO, ellOffPrpO, ellOffYllO, ellOffWhtO, ellOffOffO, ellOffRNDO, CCyc)
End Select : End Select
End Sub
Private Sub CCycB(ByVal CRed As Object, ByVal CGrn As Object, ByVal CBlu As Object, ByVal CTrq As Object, ByVal CPrp As Object,
ByVal CYll As Object, ByVal CWht As Object, ByVal COff As Object, ByVal CRnd As Object, ByVal CC As Integer)
CRed.Opacity = 0 : CGrn.Opacity = 0 : CBlu.Opacity = 0 : CTrq.Opacity = 0 : CPrp.Opacity = 0
CYll.Opacity = 0 : CWht.Opacity = 0 : COff.Opacity = 0 : CRnd.Opacity = 0
Select Case CC : Case 1 : CRed.Opacity = 1 : Case 2 : CGrn.Opacity = 1 : Case 3 : CBlu.Opacity = 1
Case 4 : CTrq.Opacity = 1 : Case 5 : CPrp.Opacity = 1 : Case 6 : CYll.Opacity = 1
Case 7 : CWht.Opacity = 1 : Case 8 : CRnd.Opacity = 1 : Case 9 : COff.Opacity = 1 : End Select
End Sub
Sub ViewCC(ByVal Sender As Object, ByVal e As RoutedEventArgs)
Try : CCflag = 1 : btnViewCC.Interval = 500 : If CCCi < CCCm Then : CCCi = CCCi + 1 : Else : CCCi = 1 : End If : CCDisp() : CCflag = 0 : Catch ex As Exception : End Try
End Sub
Sub btnColCyc_Click(ByVal Sender As Object, ByVal e As RoutedEventArgs) Handles btnColCyc.Click
For i = 1 To CCCm : SceneShifter(1) : AF(1) = AF(1) + 1 : TCompDisp() : Next
For n = 1 To CCCm : TS = TS + 1 : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5
Try : LC = LEDstate(0, i, j, k, TS) : If LC = 0 Then : LC = 8 : End If
LEDstate(0, i, j, k, TS) = CCCL(n, 2, LC) - 1
LEDColor = LEDstate(0, i, j, k, TS) : LEDNumber = LEDstate(1, i, j, k, TS)
If LEDColor = 8 Then : LEDstate(0, i, j, k, TS) = rn.Next(1, 8) : LEDColor = LEDstate(0, i, j, k, TS) : End If
LEDdisplayer(LEDNumber, LEDColor) : Catch : End Try
Next : Next : Next : SceneLoader() : Next
End Sub
#End Region
#Region "Letter Sequencing"
'SEQUENCER OPTION BUTTONS
Private Sub btnColB_Click(sender As Object, e As RoutedEventArgs) Handles btnColB.Click
EllMoveA(6, "B")
End Sub
Private Sub btnColF_Click(sender As Object, e As RoutedEventArgs) Handles btnColF.Click
EllMoveA(6, "F")
End Sub
Private Sub btnRefB_Click(sender As Object, e As RoutedEventArgs) Handles btnRefB.Click
EllMoveA(5, "B")
End Sub
Private Sub btnRefF_Click(sender As Object, e As RoutedEventArgs) Handles btnRefF.Click
EllMoveA(5, "F")
End Sub
Private Sub btnRotB_Click(sender As Object, e As RoutedEventArgs) Handles btnRotB.Click
EllMoveA(4, "B")
End Sub
Private Sub btnRotF_Click(sender As Object, e As RoutedEventArgs) Handles btnRotF.Click
EllMoveA(4, "F")
End Sub
Private Sub btnThckiB_Click(sender As Object, e As RoutedEventArgs) Handles btnThickB.Click
EllMoveA(3, "B")
End Sub
Private Sub btnThickF_Click(sender As Object, e As RoutedEventArgs) Handles btnThickF.Click
EllMoveA(3, "F")
End Sub
Private Sub btnPlaneB_Click(sender As Object, e As RoutedEventArgs) Handles btnPlaneB.Click
EllMoveA(2, "B")
End Sub
Private Sub btnPlaneF_Click(sender As Object, e As RoutedEventArgs) Handles btnPlaneF.Click
EllMoveA(2, "F")
End Sub
Private Sub btnOriB_Click(sender As Object, e As RoutedEventArgs) Handles btnOriB.Click
EllMoveA(1, "B")
End Sub
Private Sub btnOriF_Click(sender As Object, e As RoutedEventArgs) Handles btnOriF.Click
EllMoveA(1, "F")
End Sub
'Ellipse Option Selector
Private Sub EllMoveA(ByVal Ell As Integer, ByVal BF As String)
Select Case BF 'Backwards/Forwards
Case "B" : OPTRRC(LSeq, LScrni, Ell) = OPTRRC(LSeq, LScrni, Ell) - 1
If OPTRRC(LSeq, LScrni, Ell) = 0 Then : OPTRRC(LSeq, LScrni, Ell) = Emm(Ell - 1) : End If
Case "F" : OPTRRC(LSeq, LScrni, Ell) = OPTRRC(LSeq, LScrni, Ell) + 1
If OPTRRC(LSeq, LScrni, Ell) = Emm(Ell - 1) + 1 Then : OPTRRC(LSeq, LScrni, Ell) = 1 : End If
End Select : EllMoveB(Ell, OPTRRC(LSeq, LScrni, Ell), EllArr(Ell - 1))
End Sub
Private Sub EllMoveB(ByVal ElValue As Integer, ByVal elPos As Integer, ByVal Elli As Object)
Select Case ElValue 'Values
Case = 6 : Select Case elPos 'Color
Case 1 : MB(92, 42, "Red") : Case 2 : MB(67, 45, "Green") : Case 3 : MB(45, 53, "Blue") : Case 4 : MB(67, 61, "Trqs") : Case 5 : MB(92, 62, "Prpl")
Case 6 : MB(117, 61, "Yllw") : Case 7 : MB(142, 53, "White") : Case 8 : MB(117, 45, "Clear") : Case 9 : MB(92, 52, "Wild") : End Select
Case = 5 : Select Case elPos 'Reflection
Case 1 : MB(45, 93, "X") : Case 2 : MB(142, 93, "O") : End Select
Case = 4 : Select Case elPos 'Rotation
Case 1 : MB(92, 123, "0") : Case 2 : MB(45, 133, "90") : Case 3 : MB(92, 142, "180") : Case 4 : MB(142, 133, "270") : End Select
Case = 3 : Select Case elPos 'Thickness
Case 1 : MB(92, 163, "1") : Case 2 : MB(54, 167, "2") : Case 3 : MB(72, 181, "3") : Case 4 : MB(112, 181, "4") : Case 5 : MB(132, 167, "5") : End Select
Case = 2 : Select Case elPos 'Plane
Case 1 : MB(92, 203, "1") : Case 2 : MB(58, 206, "2") : Case 3 : MB(58, 219, "3") : Case 4 : MB(92, 222, "4")
Case 5 : MB(128, 219, "5") : Case 6 : MB(128, 206, "0") : End Select
Case = 1 : Select Case elPos 'Orientation
Case 1 : MB(92, 243, "x") : Case 2 : MB(58, 259, "y") : Case 3 : MB(128, 259, "z") : End Select
End Select : Elli.Margin = elLoc : tbArr(ElValue - 1).Text = EllStr
End Sub
Private Sub MB(ByVal Xpos As Integer, ByVal Ypos As Integer, ByVal ES As String)
elLoc = New Thickness(Xpos, Ypos, 0, 0) : EllStr = ES
End Sub
'Sequencing Frames
Private Sub btnLFrmSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnLFrmSeq.Click
If LScrni > 1 Then : LScrni = LScrni - 1 : End If : PermDis()
End Sub
Private Sub btnDelFrmSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnDelFrmSeq.Click
If LScrnf(LSeq) > 1 Then : For i = LScrni To LScrnf(LSeq) - 1 : For j = 1 To 6 : OPTRRC(LSeq, i, j) = OPTRRC(LSeq, i + 1, j) : Next : Next
For j = 1 To 6 : OPTRRC(LSeq, LScrnf(LSeq), j) = 1 : Next : LScrnf(LSeq) = LScrnf(LSeq) - 1 : End If
If LScrni > LScrnf(LSeq) Then : LScrni = LScrnf(LSeq) : End If
PermDis()
End Sub
Private Sub btnAddFrmSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnAddFrmSeq.Click
If LScrnf(LSeq) + 1 < 25 Then : LScrnf(LSeq) = LScrnf(LSeq) + 1 : For i = LScrnf(LSeq) + 1 To LScrni + 1 Step -1
For j = 1 To 6 : OPTRRC(LSeq, i, j) = OPTRRC(LSeq, i - 1, j) : Next : Next : LScrni = LScrni + 1 : End If : PermDis()
End Sub
Private Sub btnRFrmSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnRFrmSeq.Click
If LScrni < LScrnf(LSeq) Then : LScrni = LScrni + 1 : End If : PermDis()
End Sub
'Sequencing Characters
Private Sub btnLCharSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnLCharSeq.Click
If LSeq > 1 Then : LSeq = LSeq - 1 : LScrni = 1 : End If : PermDis()
End Sub
Private Sub btnDelCharSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnDelCharSeq.Click
If LSeqf > 1 Then : For i = LSeq To LSeqf - 1 : LScrnf(i) = LScrnf(i + 1) : Next : LScrnf(LSeqf) = 0 : LSeqf = LSeqf - 1
For k = LSeq To LSeqf : For i = 1 To LScrnf(k) : For j = 1 To 6 : OPTRRC(k, i, j) = OPTRRC(k + 1, i, j) : Next : Next : Next
If LSeq > LSeqf Then : LSeq = LSeqf : End If : LScrni = 1 : PermDis() : End If
End Sub
Private Sub btnAddCharSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnAddCharSeq.Click
If LSeqf + 1 < 30 Then : LSeqf = LSeqf + 1 : For k = LSeqf To LSeq + 1 Step -1 : For i = 1 To LScrnf(LSeq) : For J = 1 To 6
OPTRRC(k, i, J) = OPTRRC(k - 1, i, J) : Next : Next : Next
LSeq = LSeq + 1 : LScrnf(LSeq) = 1 : LScrni = 1 : End If : PermDis()
End Sub
Private Sub btnRCharSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnRCharSeq.Click
If LSeq < LSeqf Then : LSeq = LSeq + 1 : LScrni = 1 : End If : PermDis()
End Sub
Private Sub PermDis()
For i = 1 To 6 : EllMoveB(i, OPTRRC(LSeq, LScrni, i), EllArr(i - 1)) : Next
tbFrmSeq.Text = CStr(LScrni) & "/" & CStr(LScrnf(LSeq))
tbCharSeq.Text = CStr(LSeq) & "/" & CStr(LSeqf)
End Sub
'Firing Sequencer
Private Sub btnSetSeq_Click(sender As Object, e As RoutedEventArgs) Handles btnSetSeq.Click
SeqLoop = 1
For j = 1 To LSeqf : For i = 1 To LScrnf(j) : LS = txtSequence.Text.Substring(SeqLoop - 1, 1)
GridCleaner() : FireSeqA(LS, i, j) : Next : SeqLoop = SeqLoop + 1
If SeqLoop = txtSequence.Text.Length + 1 Then : Exit Sub : End If
If j = LSeqf Then : j = 0 : End If
Next
End Sub
Private Sub GridCleaner()
If OwIn = 1 Then : For i = 1 To 5 : For j = 1 To 5 : For k = 1 To 5 : LEDdisplayer(100 * i + 10 * j + 1 * k, 0)
LEDstate(0, i, j, k, TS) = 0 : LEDstate(1, i, j, k, TS) = 0 : Next : Next : Next : End If
End Sub
Private Sub FireSeqA(ByVal Letter As String, ByVal i As Integer, ByVal j As Integer)
Select Case Letter
Case "A" : Lt(0, 0) : Case "B" : Lt(0, 1) : Case "C" : Lt(0, 2) : Case "D" : Lt(0, 3) : Case "E" : Lt(0, 4)
Case "F" : Lt(0, 5) : Case "G" : Lt(0, 6) : Case "H" : Lt(0, 7) : Case "I" : Lt(0, 8) : Case "J" : Lt(0, 9)
Case "K" : Lt(1, 0) : Case "L" : Lt(1, 1) : Case "M" : Lt(1, 2) : Case "N" : Lt(1, 3) : Case "O" : Lt(1, 4)
Case "P" : Lt(1, 5) : Case "Q" : Lt(1, 6) : Case "R" : Lt(1, 7) : Case "S" : Lt(1, 8) : Case "T" : Lt(1, 9)
Case "U" : Lt(2, 0) : Case "V" : Lt(2, 1) : Case "W" : Lt(2, 2) : Case "X" : Lt(2, 3) : Case "Y" : Lt(2, 4)
Case "Z" : Lt(2, 5) : Case "0" : Lt(2, 6) : Case "1" : Lt(2, 7) : Case "2" : Lt(2, 8) : Case "3" : Lt(2, 9)
Case "4" : Lt(3, 0) : Case "5" : Lt(3, 1) : Case "6" : Lt(3, 2) : Case "7" : Lt(3, 3) : Case "8" : Lt(3, 4)
Case "9" : Lt(3, 5) : Case "a" : Lt(3, 6) : Case "b" : Lt(3, 7) : Case "c" : Lt(3, 8) : Case "d" : Lt(3, 9)
Case "e" : Lt(4, 0) : Case "f" : Lt(4, 1) : Case "g" : Lt(4, 2) : Case "h" : Lt(4, 3) : Case "i" : Lt(4, 4)
Case "j" : Lt(4, 5) : Case "k" : Lt(4, 6) : Case "l" : Lt(4, 7) : Case "m" : Lt(4, 8) : Case "n" : Lt(4, 9)
Case "o" : Lt(5, 0) : Case "p" : Lt(5, 1) : Case "q" : Lt(5, 2) : Case "r" : Lt(5, 3) : Case "s" : Lt(5, 4)
Case "t" : Lt(5, 5) : Case "u" : Lt(5, 6) : Case "v" : Lt(5, 7) : Case "w" : Lt(5, 8) : Case "x" : Lt(5, 9)
Case "y" : Lt(6, 0) : Case "z" : Lt(6, 1) : Case "!" : Lt(6, 2) : Case "#" : Lt(6, 3) : Case "$" : Lt(6, 4)
Case "%" : Lt(6, 5) : Case "^" : Lt(6, 6) : Case "." : Lt(6, 7) : Case ":" : Lt(6, 8) : Case "?" : Lt(6, 9)
Case " " : Lt(7, 0) : End Select
FireSeqB(LetX, LetY, OPTRRC(j, i, 1), OPTRRC(j, i, 2), OPTRRC(j, i, 3), OPTRRC(j, i, 4), OPTRRC(j, i, 5), OPTRRC(j, i, 6))
SceneLoader() : SceneShifter(2) : AF(1) = AF(1) + 1 : TCompDisp()
End Sub
Private Sub Lt(ByVal R, C)
LetX = R : LetY = C
End Sub
Private Sub FireSeqB(ByVal A0, A1, A2, A3, A4, A5, A6, A7)
'A0 - ROW ... A1 - COLUMN
'{{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"},
'{"K", "L", "M", "N", "O", "P", "Q", "R", "S", "T"},
'{"U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3"},
'{"4", "5", "6", "7", "8", "9", "a", "b", "c", "d"},
'{"e", "f", "g", "h", "i", "j", "k", "l", "m", "n"},
'{"o", "p", "q", "r", "s", "t", "u", "v", "w", "x"},
'{"y", "z", "!", "#", "$", "%", "^", ".", ":", "?"}}
'A2 - x/y/z, Orientation 'A3 - 1/2/3/4/5/0, Plane 'A4 - 1/2/3/4/5, Thickness 'A5 - 0/1/2/3, Rotation 'A6 - 0/1, Reflection
'A7 - red1/green2/blue3/turquiose4/purple5/yellow6/white7/off8/wild9
Try : If A6 = 2 Then : A5 = 8 - A5 : Else : A5 = A5 : End If : If A7 < 9 Then : WC = 0 : Else : WC = 1 : End If
For Q As Integer = 0 To 24 : RLCode(Q) = Lcode(10 * A0 + A1, aQRP(A5 - 1, Q) - 1) : Next
For T = 0 To A4 - 1 : For i = 1 To 5 : For j = 1 To 5
If WC = 0 Then : wlc = A7 : Else : wlc = rn.Next(1, 8) : End If
Try : Select Case A2
Case = 1 'x
LEDstate(0, A3 - T, i, j, TS) = wlc * RLCode(i + 5 * j - 6)
LEDstate(1, A3 - T, i, j, TS) = j + i * 10 + (A3 - T) * 100
Case = 2 'y
LEDstate(0, i, A3 - T, j, TS) = wlc * RLCode(i + 5 * j - 6)
LEDstate(1, i, A3 - T, j, TS) = j + (A3 - T) * 10 + i * 100
Case = 3 'z
LEDstate(0, i, 6 - j, 6 - A3 + T, TS) = wlc * RLCode(i + 5 * j - 6)
LEDstate(1, i, 6 - j, 6 - (A3 - T), TS) = (6 - A3 + T) + (6 - j) * 10 + i * 100
End Select : Catch : End Try : Next : Next : Next : Catch : End Try
End Sub
#End Region
#Region "Iterating Motion Fields"
Private Sub btnPreCst_Click(sender As Object, e As RoutedEventArgs) Handles btnPreCst.Click
frCsITFld.Visibility = Visibility.Collapsed : frPrITFld.Visibility = Visibility.Collapsed
Select Case PreCst
Case 0 : PreCst = 1 : frPrITFld.Visibility = Visibility.Visible : btnPreCst.Content = "P" : txtPreCst.Text = "Preset Fields:"
Case 1 : PreCst = 0 : frCsITFld.Visibility = Visibility.Visible : btnPreCst.Content = "C" : txtPreCst.Text = "Custom Fields:"
End Select
End Sub
'ITFD(3,126,126,126) => ITERATION FIELD MATRIX
'IFD(3) = {{A,B,C}} => Parameters of the ITFD Matrix
'ITFD(0,0,0,0) => #Scenes in Iteration Field (1-125)
'IFD(0) : A => Current Scene in Iteration Field (1-125)
Private Sub btnItFdScneB_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdScneB.Click
If IFD(0) > 1 Then : IFD(0) = IFD(0) - 1 : IFD(1) = ITFD(0, IFD(0), 0, 0) : IFD(2) = ITFD(0, IFD(0), IFD(1), 0) : End If : FDisplay()
End Sub
Private Sub btnItFdScneM_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdScneM.Click
If ITFD(0, 0, 0, 0) > 1 Then : ITFD(0, 0, 0, 0) = ITFD(0, 0, 0, 0) - 1 : IFD(1) = 1 : IFD(2) = 1
If IFD(0) > ITFD(0, 0, 0, 0) Then : IFD(0) = ITFD(0, 0, 0, 0) : End If : End If
FDisplay()
End Sub
Private Sub btnItFdScneP_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdScneP.Click
ITFD(0, 0, 0, 0) = ITFD(0, 0, 0, 0) + 1 : IFD(0) = IFD(0) + 1 : IFD(1) = 1 : IFD(2) = 1 : FDisplay()
End Sub
Private Sub btnItFdScneF_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdScneF.Click
If IFD(0) < ITFD(0, 0, 0, 0) Then : IFD(0) = IFD(0) + 1 : IFD(1) = 1 : IFD(2) = ITFD(0, IFD(0), IFD(1), 0) : End If : FDisplay()
End Sub
'ITFD(0,A,0,0) => #Steps in Scene A (1-125)
'IFD(1) : B => Current Step in Scene A (1-125)
Private Sub btnItFdStepB_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdStepB.Click
If IFD(1) > 1 Then : IFD(1) = IFD(1) - 1 : IFD(2) = ITFD(0, IFD(0), IFD(1), 0) : End If : FDisplay()
End Sub
Private Sub btnItFdStepM_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdStepM.Click
If ITFD(0, IFD(0), 0, 0) > 1 Then : ITFD(0, IFD(0), 0, 0) = ITFD(0, IFD(0), 0, 0) - 1 : IFD(2) = 1
If IFD(1) > ITFD(0, IFD(0), 0, 0) Then : IFD(1) = ITFD(0, IFD(0), 0, 0) : End If : End If
FDisplay()
End Sub
Private Sub btnItFdStepP_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdStepP.Click
ITFD(0, IFD(0), 0, 0) = ITFD(0, IFD(0), 0, 0) + 1 : IFD(1) = IFD(1) + 1 : IFD(2) = 1
ITFD(0, IFD(0), IFD(1), 0) = 1
For L = 0 To 3 : ITFD(4, IFD(0), IFD(1), L) = ITFD(4, IFD(0), IFD(1) - 1, L) : Next
cboOperation.SelectedIndex = ITFD(4, IFD(0), IFD(1), 0) - 1
For K = 1 To ITFD(0, IFD(0), IFD(1), 0) : rectArrI(K - 1).visibility = Visibility.Collapsed : Next
FDisplay()
End Sub
Private Sub btnItFdStepF_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdStepF.Click
If IFD(1) < ITFD(0, IFD(0), 0, 0) Then : IFD(1) = IFD(1) + 1 : IFD(2) = 1 : End If : FDisplay()
End Sub
'ITFD(0,A,B,0) => #Regional Points in Scene A, Step B (1-125)
'IFD(2) : C => Current Regional Point in Scene A, Step B (1-125)
Private Sub btnItFdRgnB_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdRgnB.Click
If IFD(2) > 1 Then : IFD(2) = IFD(2) - 1 : End If : FDisplay()
End Sub
Private Sub btnItFdRgnM_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdRgnM.Click
If ITFD(0, IFD(0), IFD(1), 0) > 1 Then : ITFD(0, IFD(0), IFD(1), 0) = ITFD(0, IFD(0), IFD(1), 0) - 1
If IFD(2) > ITFD(0, IFD(0), IFD(1), 0) Then : IFD(2) = ITFD(0, IFD(0), IFD(1), 0) : End If : End If
FDisplay()
End Sub
Private Sub btnItFdRgnP_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdRgnP.Click
ITFD(0, IFD(0), IFD(1), 0) = ITFD(0, IFD(0), IFD(1), 0) + 1 : IFD(2) = IFD(2) + 1 : FDisplay()
End Sub
Private Sub btnItFdRgnF_Click(sender As Object, e As RoutedEventArgs) Handles btnItFdRgnF.Click
If IFD(2) < ITFD(0, IFD(0), IFD(1), 0) Then : IFD(2) = IFD(2) + 1 : End If : FDisplay()
End Sub
'ITFD(0,A,B,C) => LEDnumbers for Regional Points in Scene A, Step B
'ITFD(1,A,B,C) => X
Private Sub btnPtXUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtXUp.Click
If ITFD(1, IFD(0), IFD(1), IFD(2)) < 5 Then
ITFD(1, IFD(0), IFD(1), IFD(2)) = ITFD(1, IFD(0), IFD(1), IFD(2)) + 1 : End If
FDisplay()
End Sub
Private Sub btnPtXdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtXdn.Click
If ITFD(1, IFD(0), IFD(1), IFD(2)) > 1 Then
ITFD(1, IFD(0), IFD(1), IFD(2)) = ITFD(1, IFD(0), IFD(1), IFD(2)) - 1 : End If
FDisplay()
End Sub
'ITFD(2,A,B,C) => Y
Private Sub btnPtYUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtYup.Click
If ITFD(2, IFD(0), IFD(1), IFD(2)) < 5 Then
ITFD(2, IFD(0), IFD(1), IFD(2)) = ITFD(2, IFD(0), IFD(1), IFD(2)) + 1 : End If
FDisplay()
End Sub
Private Sub btnPtYdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtYdn.Click
If ITFD(2, IFD(0), IFD(1), IFD(2)) > 1 Then
ITFD(2, IFD(0), IFD(1), IFD(2)) = ITFD(2, IFD(0), IFD(1), IFD(2)) - 1 : End If
FDisplay()
End Sub
'ITFD(3,A,B,C) => Z
Private Sub btnPtZUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtZup.Click
If ITFD(3, IFD(0), IFD(1), IFD(2)) < 5 Then
ITFD(3, IFD(0), IFD(1), IFD(2)) = ITFD(3, IFD(0), IFD(1), IFD(2)) + 1 : End If
FDisplay()
End Sub
Private Sub btnPtZdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtZdn.Click
If ITFD(3, IFD(0), IFD(1), IFD(2)) > 1 Then
ITFD(3, IFD(0), IFD(1), IFD(2)) = ITFD(3, IFD(0), IFD(1), IFD(2)) - 1 : End If
FDisplay()
End Sub
Private Sub FDisplay()
If ITFD(1, IFD(0), IFD(1), IFD(2)) * ITFD(2, IFD(0), IFD(1), IFD(2)) * ITFD(3, IFD(0), IFD(1), IFD(2)) = 0 Then
For L = 1 To 3 : If IFD(2) = 1 Then : ITFD(L, IFD(0), IFD(1), IFD(2)) = 1 : Else : ITFD(L, IFD(0), IFD(1), IFD(2)) = ITFD(L, IFD(0), IFD(1), IFD(2) - 1) : End If : Next : End If
ITFD(0, IFD(0), IFD(1), IFD(2)) = ITFD(1, IFD(0), IFD(1), IFD(2)) * 100 + ITFD(2, IFD(0), IFD(1), IFD(2)) * 10 + ITFD(3, IFD(0), IFD(1), IFD(2)) * 1
txtPtX.Text = ITFD(1, IFD(0), IFD(1), IFD(2)) : txtPtY.Text = ITFD(2, IFD(0), IFD(1), IFD(2)) : txtPtZ.Text = ITFD(3, IFD(0), IFD(1), IFD(2))
cboOperation.SelectedIndex = ITFD(4, IFD(0), IFD(1), 0) - 1
txtPtXv.Text = ITFD(4, IFD(0), IFD(1), 1) : If txtPtXv.Text = 999 Then : txtPtXv.Text = "X" : End If
txtPtYv.Text = ITFD(4, IFD(0), IFD(1), 2) : If txtPtYv.Text = 999 Then : txtPtYv.Text = "Y" : End If
txtPtZv.Text = ITFD(4, IFD(0), IFD(1), 3) : If txtPtZv.Text = 999 Then : txtPtZv.Text = "Z" : End If
For q = 0 To 124 : RP(rectArrI(q), 0, 0) : rectArrI(q).visibility = Visibility.Collapsed : Next
For p = 1 To ITFD(0, IFD(0), IFD(1), 0) : Try : PointResolver(rectArrI(p - 1), p) : Catch : End Try : Next
End Sub
Private Sub PointResolver(ByVal R As Object, ByVal i As Integer)
R.visibility = Visibility.Visible
If i = IFD(2) Then : R.Width = 12 : R.Height = 12 : Else : R.Width = 10 : R.Width = 10 : End If
Select Case ITFD(0, IFD(0), IFD(1), i)
Case 111 : RP(R, 413, 451) : Case 112 : RP(R, 478, 451) : Case 113 : RP(R, 543, 451) : Case 114 : RP(R, 608, 451) : Case 115 : RP(R, 673, 451)
Case 121 : RP(R, 443, 441) : Case 122 : RP(R, 508, 441) : Case 123 : RP(R, 573, 441) : Case 124 : RP(R, 638, 441) : Case 125 : RP(R, 703, 441)
Case 131 : RP(R, 473, 431) : Case 132 : RP(R, 538, 431) : Case 133 : RP(R, 603, 431) : Case 134 : RP(R, 668, 431) : Case 135 : RP(R, 733, 431)
Case 141 : RP(R, 503, 421) : Case 142 : RP(R, 568, 421) : Case 143 : RP(R, 633, 421) : Case 144 : RP(R, 698, 421) : Case 145 : RP(R, 763, 421)
Case 151 : RP(R, 533, 411) : Case 152 : RP(R, 598, 411) : Case 153 : RP(R, 663, 411) : Case 154 : RP(R, 728, 411) : Case 155 : RP(R, 793, 411)
Case 211 : RP(R, 413, 351) : Case 212 : RP(R, 478, 351) : Case 213 : RP(R, 543, 351) : Case 214 : RP(R, 608, 351) : Case 215 : RP(R, 673, 351)
Case 221 : RP(R, 443, 341) : Case 222 : RP(R, 508, 341) : Case 223 : RP(R, 573, 341) : Case 224 : RP(R, 638, 341) : Case 225 : RP(R, 703, 341)
Case 231 : RP(R, 473, 331) : Case 232 : RP(R, 538, 331) : Case 233 : RP(R, 603, 331) : Case 234 : RP(R, 668, 331) : Case 235 : RP(R, 733, 331)
Case 241 : RP(R, 503, 321) : Case 242 : RP(R, 568, 321) : Case 243 : RP(R, 633, 321) : Case 244 : RP(R, 698, 321) : Case 245 : RP(R, 763, 321)
Case 251 : RP(R, 533, 311) : Case 252 : RP(R, 598, 311) : Case 253 : RP(R, 663, 311) : Case 254 : RP(R, 728, 311) : Case 255 : RP(R, 793, 311)
Case 311 : RP(R, 413, 251) : Case 312 : RP(R, 478, 251) : Case 313 : RP(R, 543, 251) : Case 314 : RP(R, 608, 251) : Case 315 : RP(R, 673, 251)
Case 321 : RP(R, 443, 241) : Case 322 : RP(R, 508, 241) : Case 323 : RP(R, 573, 241) : Case 324 : RP(R, 638, 241) : Case 325 : RP(R, 703, 241)
Case 331 : RP(R, 473, 231) : Case 332 : RP(R, 538, 231) : Case 333 : RP(R, 603, 231) : Case 334 : RP(R, 668, 231) : Case 335 : RP(R, 733, 231)
Case 341 : RP(R, 503, 221) : Case 342 : RP(R, 568, 221) : Case 343 : RP(R, 633, 221) : Case 344 : RP(R, 698, 221) : Case 345 : RP(R, 763, 221)
Case 351 : RP(R, 533, 211) : Case 352 : RP(R, 598, 211) : Case 353 : RP(R, 663, 211) : Case 354 : RP(R, 728, 211) : Case 355 : RP(R, 793, 211)
Case 411 : RP(R, 413, 151) : Case 412 : RP(R, 478, 151) : Case 413 : RP(R, 543, 151) : Case 414 : RP(R, 608, 151) : Case 415 : RP(R, 673, 151)
Case 421 : RP(R, 443, 141) : Case 422 : RP(R, 508, 141) : Case 423 : RP(R, 573, 141) : Case 424 : RP(R, 638, 141) : Case 425 : RP(R, 703, 141)
Case 431 : RP(R, 473, 131) : Case 432 : RP(R, 538, 131) : Case 433 : RP(R, 603, 131) : Case 434 : RP(R, 668, 131) : Case 435 : RP(R, 733, 131)
Case 441 : RP(R, 503, 121) : Case 442 : RP(R, 568, 121) : Case 443 : RP(R, 633, 121) : Case 444 : RP(R, 698, 121) : Case 445 : RP(R, 763, 121)
Case 451 : RP(R, 533, 111) : Case 452 : RP(R, 598, 111) : Case 453 : RP(R, 663, 111) : Case 454 : RP(R, 728, 111) : Case 455 : RP(R, 793, 111)
Case 511 : RP(R, 413, 51) : Case 512 : RP(R, 478, 51) : Case 513 : RP(R, 543, 51) : Case 514 : RP(R, 608, 51) : Case 515 : RP(R, 673, 51)
Case 521 : RP(R, 443, 41) : Case 522 : RP(R, 508, 41) : Case 523 : RP(R, 573, 41) : Case 524 : RP(R, 638, 41) : Case 525 : RP(R, 703, 41)
Case 531 : RP(R, 473, 31) : Case 532 : RP(R, 538, 31) : Case 533 : RP(R, 603, 31) : Case 534 : RP(R, 668, 31) : Case 535 : RP(R, 733, 31)
Case 541 : RP(R, 503, 21) : Case 542 : RP(R, 568, 21) : Case 543 : RP(R, 633, 21) : Case 544 : RP(R, 698, 21) : Case 545 : RP(R, 763, 21)
Case 551 : RP(R, 533, 11) : Case 552 : RP(R, 598, 11) : Case 553 : RP(R, 663, 11) : Case 554 : RP(R, 728, 11) : Case 555 : RP(R, 793, 11)
End Select
End Sub
Private Sub RP(ByVal rect As Object, ByVal X As Double, ByVal Y As Double)
rect.Margin = New Thickness(X, Y, 0, 0)
End Sub
'ITFD(4,A,B,0) => Operational Jump of Scene A, Step B (1-6)
'(1-move, 2-copy, 3-swap) => opjumping vectors : <X,Y,Z>
'(4-Rot90+, 5-Rot90-) => opjumping lines : <X,Y,999>, <X,999,Z>, <999,Y,Z>
'(6-Reflect) => opjumping planes : <X,999,999>, <999,Y,999>, <999,999,Z>
Private Sub cboOperation_SelectItem(sender As Object, e As RoutedEventArgs) Handles cboOperation.DropDownClosed
ITFD(4, IFD(0), IFD(1), 0) = cboOperation.SelectedIndex + 1
For i = 1 To 4 : ITFD(4, IFD(0), IFD(1), i) = 1 : Next : OJumpDisp()
End Sub
'ITFD(4,A,B,1) => X-value of Operational Jump for Region in Scene A, Step B
Private Sub btnPtXVUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtXVUp.Click
ITFD(4, IFD(0), IFD(1), 1) = ITFD(4, IFD(0), IFD(1), 1) + 1 : OJumpDisp()
End Sub
Private Sub btnPtXVdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtXVdn.Click
ITFD(4, IFD(0), IFD(1), 1) = ITFD(4, IFD(0), IFD(1), 1) - 1 : OJumpDisp()
End Sub
'ITFD(4,A,B,2) => Y-value of Operational Jump for Region in Scene A, Step B
Private Sub btnPtYVUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtYVup.Click
ITFD(4, IFD(0), IFD(1), 2) = ITFD(4, IFD(0), IFD(1), 2) + 1 : OJumpDisp()
End Sub
Private Sub btnPtYVdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtYVdn.Click
ITFD(4, IFD(0), IFD(1), 2) = ITFD(4, IFD(0), IFD(1), 2) - 1 : OJumpDisp()
End Sub
'ITFD(4,A,B,3) => Z-value of Operational Jump for Region in Scene A, Step B
Private Sub btnPtZVUp_Click(sender As Object, e As RoutedEventArgs) Handles btnPtZVup.Click
ITFD(4, IFD(0), IFD(1), 3) = ITFD(4, IFD(0), IFD(1), 3) + 1 : OJumpDisp()
End Sub
Private Sub btnPtZVdn_Click(sender As Object, e As RoutedEventArgs) Handles btnPtZVdn.Click
ITFD(4, IFD(0), IFD(1), 3) = ITFD(4, IFD(0), IFD(1), 3) - 1 : OJumpDisp()
End Sub
'ITFD(4,A,B,4) => XYZ Cycler Value of Operational Jump for Region in Scene A, Step B
Private Sub btnXYZ_Click(sender As Object, e As RoutedEventArgs) Handles btnXYZ.Click
ITFD(4, IFD(0), IFD(1), 4) = ITFD(4, IFD(0), IFD(1), 4) + 1
If ITFD(4, IFD(0), IFD(1), 4) > 3 Then : ITFD(4, IFD(0), IFD(1), 4) = 1 : End If
OJumpDisp()
End Sub
Private Sub OJumpDisp()
txtPtXv.Text = "-" : txtPtYv.Text = "-" : txtPtZv.Text = "-"
Select Case ITFD(4, IFD(0), IFD(1), 0)
Case < 4 'Move-Copy-Swap Vector Displayer
If ITFD(4, IFD(0), IFD(1), 1) < 1 Then : ITFD(4, IFD(0), IFD(1), 1) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 1) > 5 Then : ITFD(4, IFD(0), IFD(1), 1) = 5 : End If
If ITFD(4, IFD(0), IFD(1), 2) < 1 Then : ITFD(4, IFD(0), IFD(1), 2) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 2) > 5 Then : ITFD(4, IFD(0), IFD(1), 2) = 5 : End If
If ITFD(4, IFD(0), IFD(1), 3) < 1 Then : ITFD(4, IFD(0), IFD(1), 3) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 3) > 5 Then : ITFD(4, IFD(0), IFD(1), 3) = 5 : End If
txtPtXv.Text = ITFD(4, IFD(0), IFD(1), 1)
txtPtYv.Text = ITFD(4, IFD(0), IFD(1), 2)
txtPtZv.Text = ITFD(4, IFD(0), IFD(1), 3)
Case < 6 '+90/-90 Rotation Line Displayer
Select Case ITFD(4, IFD(0), IFD(1), 4)
Case = 1 'X-Line Rotations
If ITFD(4, IFD(0), IFD(1), 2) < 1 Or ITFD(4, IFD(0), IFD(1), 2) = 999 Then : ITFD(4, IFD(0), IFD(1), 2) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 2) > 5 Then : ITFD(4, IFD(0), IFD(1), 2) = 5 : End If
If ITFD(4, IFD(0), IFD(1), 3) < 1 Or ITFD(4, IFD(0), IFD(1), 3) = 999 Then : ITFD(4, IFD(0), IFD(1), 3) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 3) > 5 Then : ITFD(4, IFD(0), IFD(1), 3) = 5 : End If
ITFD(4, IFD(0), IFD(1), 1) = 999 : txtPtYv.Text = ITFD(4, IFD(0), IFD(1), 2) : txtPtZv.Text = ITFD(4, IFD(0), IFD(1), 3)
Case = 2 'Y-Line Rotations
If ITFD(4, IFD(0), IFD(1), 1) < 1 Or ITFD(4, IFD(0), IFD(1), 1) = 999 Then : ITFD(4, IFD(0), IFD(1), 1) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 1) > 5 Then : ITFD(4, IFD(0), IFD(1), 1) = 5 : End If
If ITFD(4, IFD(0), IFD(1), 3) < 1 Or ITFD(4, IFD(0), IFD(1), 3) = 999 Then : ITFD(4, IFD(0), IFD(1), 3) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 3) > 5 Then : ITFD(4, IFD(0), IFD(1), 3) = 5 : End If
ITFD(4, IFD(0), IFD(1), 2) = 999 : txtPtXv.Text = ITFD(4, IFD(0), IFD(1), 1) : txtPtZv.Text = ITFD(4, IFD(0), IFD(1), 3)
Case = 3 'Z-Line Rotations
If ITFD(4, IFD(0), IFD(1), 1) < 1 Or ITFD(4, IFD(0), IFD(1), 1) = 999 Then : ITFD(4, IFD(0), IFD(1), 1) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 1) > 5 Then : ITFD(4, IFD(0), IFD(1), 1) = 5 : End If
If ITFD(4, IFD(0), IFD(1), 2) < 1 Or ITFD(4, IFD(0), IFD(1), 2) = 999 Then : ITFD(4, IFD(0), IFD(1), 2) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 2) > 5 Then : ITFD(4, IFD(0), IFD(1), 2) = 5 : End If
ITFD(4, IFD(0), IFD(1), 3) = 999 : txtPtXv.Text = ITFD(4, IFD(0), IFD(1), 1) : txtPtYv.Text = ITFD(4, IFD(0), IFD(1), 2)
End Select
Case < 7 'Reflective Plane Displayer
Select Case ITFD(4, IFD(0), IFD(1), 4)
Case = 1 'X-Plane Reflections
If ITFD(4, IFD(0), IFD(1), 1) < 1 Or ITFD(4, IFD(0), IFD(1), 1) = 999 Then : ITFD(4, IFD(0), IFD(1), 1) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 1) > 5 Then : ITFD(4, IFD(0), IFD(1), 1) = 5 : End If
ITFD(4, IFD(0), IFD(1), 2) = 999 : ITFD(4, IFD(0), IFD(1), 3) = 999 : txtPtXv.Text = ITFD(4, IFD(0), IFD(1), 1)
Case = 2 'Y-Plane Reflections
If ITFD(4, IFD(0), IFD(1), 2) < 1 Or ITFD(4, IFD(0), IFD(1), 2) = 999 Then : ITFD(4, IFD(0), IFD(1), 2) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 2) > 5 Then : ITFD(4, IFD(0), IFD(1), 2) = 5 : End If
ITFD(4, IFD(0), IFD(1), 1) = 999 : ITFD(4, IFD(0), IFD(1), 3) = 999 : txtPtYv.Text = ITFD(4, IFD(0), IFD(1), 2)
Case = 3 'Z-Plane Reflections
If ITFD(4, IFD(0), IFD(1), 3) < 1 Or ITFD(4, IFD(0), IFD(1), 3) = 999 Then : ITFD(4, IFD(0), IFD(1), 3) = 1
ElseIf ITFD(4, IFD(0), IFD(1), 3) > 5 Then : ITFD(4, IFD(0), IFD(1), 3) = 5 : End If
ITFD(4, IFD(0), IFD(1), 1) = 999 : ITFD(4, IFD(0), IFD(1), 2) = 999 : txtPtZv.Text = ITFD(4, IFD(0), IFD(1), 3)
End Select
End Select : FDisplay()
End Sub
'ITFD(5,A,B,0) => Dimensional Parameters of Scene A, Step B (1-8)
'1 - looping, 0 - Flat : <xyz> => 1<000>, 2<001>, 3<010>, 4<011>, 5<100>, 6<101>, 7<110>, 8<111>
Private Sub DimensionParam()
ITFD(5, IFD(0), IFD(1), 0) = 4 * ITFD(5, IFD(0), IFD(1), 1) + 2 * ITFD(5, IFD(0), IFD(1), 2) + 1 * ITFD(5, IFD(0), IFD(1), 3) + 1
FDisplay()
End Sub
'ITFD(5,A,B,1) => X : ITFD(5,A,B,2) => Y : ITFD(5,A,B,3) => Z
Private Sub Xloop(sender As Object, e As RoutedEventArgs) Handles cbxXloop.Click
If cbxXloop.IsChecked Then : ITFD(5, IFD(0), IFD(1), 1) = 1 : Else ITFD(5, IFD(0), IFD(1), 1) = 0 : End If : DimensionParam()
End Sub
Private Sub Yloop(sender As Object, e As RoutedEventArgs) Handles cbxYloop.Click
If cbxYloop.IsChecked Then : ITFD(5, IFD(0), IFD(1), 2) = 1 : Else ITFD(5, IFD(0), IFD(1), 2) = 0 : End If : DimensionParam()
End Sub
Private Sub Zloop(sender As Object, e As RoutedEventArgs) Handles cbxZloop.Click
If cbxZloop.IsChecked Then : ITFD(5, IFD(0), IFD(1), 3) = 1 : Else ITFD(5, IFD(0), IFD(1), 3) = 0 : End If : DimensionParam()
End Sub
#End Region
#Region "Set, View, and Encode Animation"
'Set Animation Scenes
Private Sub btnSi_Click(sender As Object, e As RoutedEventArgs) Handles btnSi.Click
If TS <= AF(1) Then : AF(0) = TS : TCompDisp() : End If
End Sub
Private Sub btnSf_Click(sender As Object, e As RoutedEventArgs) Handles btnSf.Click
If TS >= AF(0) Then : AF(1) = TS : TCompDisp() : End If
End Sub
Private Sub btnNPlus_Click(sender As Object, e As RoutedEventArgs) Handles btnNPlus.Click
If TS >= AF(0) And TS <= AF(1) Then : ScFrames(TS) = ScFrames(TS) + 1 : TCompDisp() : End If
End Sub
Private Sub btnNMinus_Click(sender As Object, e As RoutedEventArgs) Handles btnNMinus.Click
If ScFrames(TS) > 1 Then : ScFrames(TS) = ScFrames(TS) - 1 : TCompDisp() : End If
End Sub
'Set Animation Time
Private Sub btnTMinus5_Click(sender As Object, e As RoutedEventArgs) Handles btnTMinus5.Click
If AnTime > 10.05 Then : AnTime = AnTime - 10 : Else AnTime = 1 : End If : TCompDisp()
End Sub
Private Sub btnTMinus_Click(sender As Object, e As RoutedEventArgs) Handles btnTMinus.Click
If AnTime > 1.99 Then : AnTime = AnTime - 1.0 : Else AnTime = 1 : End If : TCompDisp()
End Sub
Private Sub btnTPlus5_Click(sender As Object, e As RoutedEventArgs) Handles btnTPlus5.Click
AnTime = AnTime + 10 : TCompDisp()
End Sub
Private Sub btnTPlus_Click(sender As Object, e As RoutedEventArgs) Handles btnTPlus.Click
AnTime = AnTime + 1 : TCompDisp()
End Sub
'Animation Viewer
Sub ViewAnimation(ByVal Sender As Object, ByVal e As RoutedEventArgs)
Try
If TS + 2 > AF(1) Then : TSn = TS - AF(1) + 2 : Else : TSn = TS + 2 : End If
btnVwAnim.Interval = ScTime(TSn) * 1000
If TS < AF(1) Then : TS = TS + 1 : Else : TS = AF(0) : End If
SceneLoader()
Catch ex As Exception : End Try
End Sub
'Animation Encoder
Private Sub btnEncode_Click(sender As Object, e As RoutedEventArgs) Handles btnEncode.Click
EncAn = "if(tFlag=0){startTime=millis(); tFlag=1;}else{switch(Scene){
"
For Fr = AF(0) To AF(1)
EncFr = "case '" & Fr & "' : duration=" & 1000 * ScTime(Fr) & "; endTime=startTime+duration; while(endTime>>millis())
{"
EncCol = "" : For cx = 1 To 5 : For cy = 1 To 5 : For cz = 1 To 5 : Select Case LEDstate(0, cx, cy, cz, Fr)
Case Is = 0 : EncCol = ""
Case Is = 1 : EncCol = "RED(" & cx & "," & cy & "," & cz & "); "
Case Is = 2 : EncCol = "GRN(" & cx & "," & cy & "," & cz & "); "
Case Is = 3 : EncCol = "BLU(" & cx & "," & cy & "," & cz & "); "
Case Is = 4 : EncCol = "YLW(" & cx & "," & cy & "," & cz & "); "
Case Is = 5 : EncCol = "PPL(" & cx & "," & cy & "," & cz & "); "
Case Is = 6 : EncCol = "TRQ(" & cx & "," & cy & "," & cz & "); "
Case Is = 7 : EncCol = "WHT(" & cx & "," & cy & "," & cz & "); "
End Select : EncFr = EncFr & EncCol : Next : Next : Next
EncAn = EncAn & EncFr & "}; break;
" : Next : EncAn = EncAn & "default : Scene = 0; break; } Scene++; tFlag=0;} "
tbxEncode.Text = EncAn
End Sub
#End Region
End Class
